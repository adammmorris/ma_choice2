guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 7, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 20, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 20, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb + 2, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 3, y = mb + 2, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2.3, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
2 / 1000
c(2,5,10,20,40,80) / 1000
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '..5%', '1%', '2%', '4%', '8%'), c('.2%', '..5%', '1%', '2%', '4%', '8%')))
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '..5%', '1%', '2%', '4%', '8%'), c('.2%', '..5%', '1%', '2%', '4%', '8%')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
#geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '.5%', '1%', '2%', '4%', '8%'), c('.2%', '.5%', '1%', '2%', '4%', '8%')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
#geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
load("~/Me/Psychology/Projects/choicesets/git/data/choice-set/months_confounded/real1/analysis.rdata")
df.logit
# for selection tests, we need logit
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo.filt)) {
subj.name = df.demo$subject[subj]
recalled.temp = df.words.filt$in.cs[df.words.filt$subject == subj.name]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words.filt %>% filter(subject == subj.name)
df.s2.temp = df.s2.filt %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
Condition.col = rep(df.s2.temp$cond, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$s1_value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_s1value[recalled.temp], nAnswered)
MBval.col = rep(df.words.temp$s2_value[recalled.temp], nAnswered)
MBhigh.col = rep(df.words.temp$high_s2value[recalled.temp], nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
ind = ind + 1
}
}
Choice.col = as.vector(t(temp.choice))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col))
}
}
df.logit = df.logit %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
View(df.logit)
rm(list=ls())
library(mlogit)
library(nnet)
library(ggstatsplot)
methods(nobs)
load("/Users/adam/Me/Psychology/Projects/choicesets/git/data/choice-set/months_confounded_loss/real1/analysis.rdata")
summary(m.cs.s1)
load("~/Me/Psychology/Projects/choicesets/git2/experiments/food/1/analysis.RData")
## raw data
p = ggplot(data = df2.filt %>% mutate(chosen = ifelse(chosen == T, T, NA)), aes(x = val, y = val.spec, color = chosen, group = chosen)) +
geom_jitter(size = 2) +
geom_vline(xintercept = 4) +
geom_hline(yintercept = 4) +
labs(x = '', y = '') +
guides(color = F)
require(dplyr)
require(ggplot2)
require(ggExtra)
require(tidyr)
require(lme4)
require(lmerTest)
require(mlogit)
require(rje)
## raw data
p = ggplot(data = df2.filt %>% mutate(chosen = ifelse(chosen == T, T, NA)), aes(x = val, y = val.spec, color = chosen, group = chosen)) +
geom_jitter(size = 2) +
geom_vline(xintercept = 4) +
geom_hline(yintercept = 4) +
labs(x = '', y = '') +
guides(color = F)
ggMarginal(p, type='histogram', xparams = list(bins=8), yparams = list(bins = 8))
mean(df2.filt$val > 4)
mean(df2.filt$val >= 4)
mean(df2.filt$val < 4)
mean(df2.filt$val.spec > 4)
mean(df2.filt$val.spec < 4)
mean(df2.filt$val[df2.filt$choice] < 4)
View(df2.filt)
mean(df2.filt$val[df2.filt$chosen] < 4)
mean(df2.filt$val[df2.filt$chosen == 1] < 4)
mean(df2.filt$val[df2.filt$chosen == 1] > 4)
mean(df2.filt$val.spec[df2.filt$chosen == 1] > 4)
mean(df2.filt$val.spec[df2.filt$chosen == 1] < 4)
library(groundhog)
pkgs = c('dplyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist')
groundhog.library(pkgs, '2020-03-01')
library(groundhog)
pkgs = c('dplyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist')
groundhog.library(pkgs, '2020-03-01')
groundhog.library(pkgs, '2020-04-25')
R_DEFAULT_PACKAGES
?RProfile
library(groundhog)
pkgs = c('dplyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist')
groundhog.library(pkgs, '2020-03-01')
rm(list=ls())
test
1
Version()
R.Version()
library(groundhog)
pkgs = c('dplyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist')
groundhog.library(pkgs, '2020-03-01')
devtools::install_github("DejanDraschkow/mixedpower")
require(devtools)
install.packages('devtools')
require(devtools)
devtools::install_github("DejanDraschkow/mixedpower")
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v2/pilot2/analysis.rdata")
# Setup -------------------------------------------------------------------
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = base_size, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(x,',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ggplot(df.demo, aes(x = best.model.fac, fill = chosen.model.fac)) +
geom_bar(position = 'dodge') +
labs(x = '', y = '') +
guides(fill = guide_legend(title = 'Reported model', title.position = 'top', title.hjust = .5)) +
theme(legend.position = 'top') +
scale_y_continuous(breaks = NULL)
ggplot(df.demo, aes(x = chosen.model.ll)) +
geom_histogram(color = 'black') +
labs(x = "Scaled cross-validated likelihood of\nobserved choices given reported model",
y = "Number of\nsubjects\n") +
scale_y_continuous(breaks = NULL) +
#geom_segment(aes(x = 0, y = 0, xend = 0, yend = 24), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = 0, color = 'red', linetype = 'dashed') +
geom_vline(xintercept = 1, color = 'red', linetype = 'dashed') +
geom_vline(xintercept = mean(df.demo$chosen.model.ll), size = 1.5, linetype = 'longdash')
ggplot(df.demo, aes(x = best.model.fac, fill = chosen.model.fac)) +
geom_bar(position = 'dodge') +
labs(x = '', y = '') +
guides(fill = guide_legend(title = 'Reported model', title.position = 'top', title.hjust = .5)) +
theme(legend.position = 'top') +
scale_y_continuous(breaks = NULL)
## parameter awareness
# all
ggplot(df.s2 %>% mutate(rating.signed = rating.signed / 100), aes(x = rating.signed, y = fitted.weight)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = '', y = '') +
scale_x_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05)) +
scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05))
# plot subject-level accuracies
ggplot(df.s2.subj, aes(x = accuracy)) +
geom_histogram(color = 'black') +
geom_vline(xintercept = mean(df.s2.subj$accuracy, na.rm = T), size = 1.5, linetype = 'longdash') +
labs(x = '', y = '') +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(0, 0.5, 1.0), limits = c(0,1))
ggplot(df.demo, aes(x = chosen.model.ll)) +
geom_histogram(color = 'black') +
#labs(x = "Scaled cross-validated likelihood of\nobserved choices given reported model",
#     y = "Number of\nsubjects\n") +
labs(x = "", y = "") +
scale_y_continuous(breaks = NULL) +
#geom_segment(aes(x = 0, y = 0, xend = 0, yend = 24), color = 'red', linetype = 'dashed') +
geom_vline(xintercept = 0, color = 'red', linetype = 'dashed') +
geom_vline(xintercept = 1, color = 'red', linetype = 'dashed') +
geom_vline(xintercept = mean(df.demo$chosen.model.ll), size = 1.5, linetype = 'longdash')
## parameter awareness
# all
ggplot(df.s2 %>% mutate(rating.signed = rating.signed / 100), aes(x = fitted.weight, y = rating.signed)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = '', y = '') +
scale_x_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05)) +
scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05))
## parameter awareness
# all
ggplot(df.s2 %>% mutate(rating.signed = rating.signed / 100), aes(x = rating.signed, y = fitted.weight)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = '', y = '') +
scale_x_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05)) +
scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05))
ggplot(df.demo, aes(x = best.model.fac, fill = chosen.model.fac)) +
geom_bar(position = 'dodge') +
labs(x = '', y = '') +
guides(fill = guide_legend(title = 'Reported model', title.position = 'top', title.hjust = .5)) +
theme(legend.position = 'top') +
scale_y_continuous(breaks = NULL)
View(df.demo)
View(df.demo)
# do heatmap
df.demo %>% group_by(best.model.fac, chosen.model.fac) %>%
summarize(num.subj = n())
# do heatmap
df.demo.heat = df.demo %>% group_by(best.model.fac, chosen.model.fac) %>%
summarize(num.subj = n())
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '') +
ggplot(df.demo, aes(x = signed_weights_real, fill = signed_weights)) +
geom_bar(position = 'dodge')
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '')
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '')
# do heatmap
df.demo.heat = df.demo %>% group_by(chosen.model.fac, best.model.fac) %>%
summarize(num.subj = n())
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '')
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '')
require(RColorBrewer)
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '') +
scale_color_brewer(palette = 'YlOrRed')
display.brewer.all()
display.brewer.pal()
display.brewer.all()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '') +
scale_fill_brewer(palette = 'YlOrRed')
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '') +
scale_fill_brewer(palette = 'YlOrRed')
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj)) +
geom_tile() +
labs(x = '', y = '') +
scale_fill_brewer(palette = 'Set1')
View(df.demo.heat)
View(df.demo.heat)
# do heatmap
df.demo.heat = df.demo %>% group_by(chosen.model.fac, best.model.fac) %>%
summarize(num.subj = n()) %>%
mutate(num.subj.norm = num.subj / max(num.subj))
View(df.demo.heat)
# do heatmap
df.demo.heat = df.demo %>% group_by(chosen.model.fac, best.model.fac) %>%
summarize(num.subj = n()) %>%
ungroup() %>%
mutate(num.subj.norm = num.subj / max(num.subj))
View(df.demo.heat)
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj.norm)) +
geom_tile() +
labs(x = '', y = '') +
scale_fill_brewer(palette = 'Set1')
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = as.factor(num.subj.norm))) +
geom_tile() +
labs(x = '', y = '') +
scale_fill_brewer(palette = 'Set1')
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = as.factor(num.subj))) +
geom_tile() +
labs(x = '', y = '') +
scale_fill_brewer(palette = 'YlOrRd')
# do heatmap
df.demo.heat = df.demo %>% group_by(chosen.model.fac, best.model.fac) %>%
summarize(num.subj = n()) %>%
ungroup() %>%
mutate(num.subj.norm = num.subj / max(num.subj),
num.subj.fac = as.factor(num.subj))
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac, fill = num.subj.fac, alpha = num.subj.fac)) +
geom_tile() +
labs(x = '', y = '') +
scale_fill_brewer(palette = 'YlOrRd')
## parameter awareness
# all
ggplot(df.s2 %>% mutate(rating.signed = rating.signed / 100), aes(x = rating.signed, y = fitted.weight)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = '', y = '') +
scale_x_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05)) +
scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05))
## parameter awareness
# all
ggplot(df.s2 %>% mutate(rating.signed = rating.signed / 100), aes(x = rating.signed, y = fitted.weight)) +
geom_point() +
geom_smooth() +
labs(x = '', y = '') +
scale_x_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05)) +
scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05))
## parameter awareness
# all
ggplot(df.s2 %>% mutate(rating.signed = rating.signed / 100), aes(x = rating.signed, y = fitted.weight)) +
geom_point() +
#geom_smooth() +
labs(x = '', y = '') +
scale_x_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05)) +
scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05))
## parameter awareness
# all
ggplot(df.s2 %>% mutate(rating.signed = rating.signed / 100), aes(x = fitted.weight, y = rating.signed)) +
geom_point() +
#geom_smooth() +
labs(x = '', y = '') +
scale_x_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05)) +
scale_y_continuous(breaks = c(-1, 0, 1), limits = c(-1, 1.05))
