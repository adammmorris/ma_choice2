geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = "Attentional Control Scale\nscore", y = "Process awareness\nscore") +
scale_x_continuous(breaks = c(20,100), limits = c(20,100)) +
scale_y_continuous(breaks = c(-2,-1,0,1), limits = c(-2,1.4))
summary(m.acs1)
m.acs1 = lm(accuracy ~ acs, data = df.demo)
summary(m.acs1)
standardize_parameters(m.acs1)
summary(m.acs1)
ggplot(df.demo, aes(x = acs, y = chosen.model.ll)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = "Attentional Control Scale\nscore", y = "Process awareness\nscore") +
scale_x_continuous(breaks = c(20,100), limits = c(20,100)) +
scale_y_continuous(breaks = c(-2,-1,0,1), limits = c(-2,1.4))
m.acs2 = glm(chose.correct.model ~ acs, data = df.demo, family = 'binomial')
summary(m.acs2)
standardize_parameters(m.acs2)
# Setup -------------------------------------------------------------------
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
require(RColorBrewer)
standardize_parameters(m.acs1)
standardize_parameters(m.acs2)
load("/Users/adam/Me/Psychology/Projects/completed/choicesets/git2/experiments/food/study1_output.rdata")
# load packages with groundhog (http://groundhogr.com/)
# start a new R session before doing this!
# if you get this (or any other) error:
# "groundhog says: 11 of the 21 packages needed by 'dplyr_0.8.4' are currently loaded, but not with the version that is needed."
# then run "rm(list=ls())", restart your R session, and try again.
#  if you still get the error, then do all the following steps in order:
# switch to R version 4, restart your R session, run "library(groundhog); groundhog.library('dplyr', '2020-06-01')", restart your R session, run "library(groundhog); groundhog.library('dplyr', '2020-03-01')", switch back to R version 3, restart your R session, and try running this script again.
# (I think this is a bug in groundhogr, and I have no idea why this fixes it, but that's what worked for me.)
library(groundhog)
pkgs = c('dplyr', 'tidyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist', 'rje')
groundhog.library(pkgs, '2020-03-01')
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
require(RColorBrewer)
require(dplyr)
require(tidyr)
require(forcats)
require(jsonlite)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = base_size, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
get.ci = function(x) {return(c(mean(x,na.rm = T) - 1.96*se(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se(x)))}
get.ci.prop = function(x) {return(c(mean(x,na.rm = T) - 1.96*se.prop(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se.prop(x)))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(gsub('\\[|\\]','',x),',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
one.att.levels =c('One', 'Multiple')
bin.wts.levels =c('Binary', 'Graded')
bin.atts.levels =c('Binary', 'Graded')
df.demo = read.csv('demo.csv', stringsAsFactors = F) %>% arrange(subject) %>%
rowwise() %>%
mutate(total_time_real = total_time / 60000,
instructions_times_list = list(as.numeric.vector(instructions_times) / 1000)) %>%
ungroup() %>%
mutate(chosen.oneatt = factor(lex_real > 50, c(F,T), one.att.levels),
chosen.binwts = factor(binwts_real > 50, c(F,T), bin.wts.levels),
chosen.binatts = factor(binatts_real > 50, c(F,T), bin.atts.levels),
subject = factor(subject), subject.num = as.numeric(subject))
for (i in 1:nrow(df.demo)) {
df.demo$instruction_times_median[i] = median(df.demo$instructions_times_list[i][[1]])
df.demo$instruction_times_sd[i] = sd(df.demo$instructions_times_list[i][[1]])
}
df.demo.followup = read.csv('demo_followup.csv', stringsAsFactors = F) %>% arrange(subject) %>%
rowwise() %>%
mutate(total_time_real = total_time / 60000,
instructions_times_list = list(as.numeric.vector(instructions_times) / 1000))
for (i in 1:nrow(df.demo.followup)) {
demo.row = df.demo$subject == df.demo.followup$subject[i];
df.demo$instruction_times_followup_median[demo.row] = median(df.demo.followup$instructions_times_list[i][[1]])
df.demo$instruction_times_followup_sd[demo.row] = sd(df.demo.followup$instructions_times_list[i][[1]])
}
# filter out anyone who didn't finish
subjlist = unique(df.demo$subject)
df.s1 = read.csv('s1.csv', stringsAsFactors = F) %>% filter(subject %in% subjlist, practice == 0) %>%
arrange(subject) %>% mutate(subject = factor(subject), subject.num = as.numeric(subject))
df.s1.practice = read.csv('s1.csv', stringsAsFactors = F) %>% filter(subject %in% subjlist, practice == 1) %>%
arrange(subject) %>% mutate(subject = factor(subject), subject.num = as.numeric(subject))
df.s2 = read.csv('s2.csv', stringsAsFactors = F) %>% filter(subject %in% subjlist) %>%
arrange(subject) %>%
mutate(subject = factor(subject), subject.num = as.numeric(subject),
least_preferred_temp = least_preferred, least_preferred = most_preferred,
most_preferred = least_preferred_temp) %>% # temporary shit I gotta do because I reversed the columns.. lol
dplyr::select(-least_preferred_temp)
df.attributes = read.csv('attributes.csv', stringsAsFactors = F) %>% filter(subject %in% subjlist) %>%
arrange(subject) %>% mutate(subject = factor(subject), subject.num = as.numeric(subject))
### MODELS
models = c('Full', 'BinAtts', 'BinWts', 'BinWtsAtts', '1Att', '1AttBinAtts')
models.one.att = c('Multiple', 'Multiple', 'Multiple', 'Multiple', 'One', 'One')
models.bin.wts = c('Graded', 'Graded', 'Binary', 'Binary', NA, NA)
models.bin.atts = c('Graded', 'Binary', 'Graded', 'Binary', 'Graded', 'Binary')
models.order = c('Full', 'BinWts', 'BinAtts', 'BinWtsAtts', '1Att', '1AttBinAtts')
df.demo = df.demo %>%
mutate(chosen.model.num = ifelse(chosen.oneatt == 'One',
ifelse(chosen.binatts == 'Binary', 6, 5),
ifelse(chosen.binwts == 'Binary',
ifelse(chosen.binatts == 'Binary', 4, 3),
ifelse(chosen.binatts == 'Binary', 2, 1))),
chosen.model = models[chosen.model.num],
chosen.model.fac = factor(chosen.model, models.order, models.order))
## ADD ANT
df.demo$alerting = NA
df.demo$orienting = NA
df.demo$exec = NA
for (i in 1:nrow(df.demo)) {
ant.row = df.ant.networks$subject == df.demo$subject[i]
if (any(ant.row)) {
alerting = df.ant.networks$alerting[ant.row]
if (!is.null(alerting)) df.demo$alerting[i] = alerting;
orienting = df.ant.networks$orienting[ant.row]
if (!is.null(orienting)) df.demo$orienting[i] = orienting;
exec = df.ant.networks$exec[ant.row]
if (!is.null(exec)) df.demo$exec[i] = exec;
}
}
### ADD ICAR
for (i in 1:nrow(df.demo.followup)) {
df.demo$icar_num_correct[df.demo$subject == df.demo.followup$subject[i]] = df.demo.followup$icar_num_correct[i]
}
### MEDITATION EXP
howoften_options = c('Less than once per week', 'About once per week', '2-4 times per week', 'Daily or almost daily')
amount_options = c('5-15 minutes per day', '15-30 minutes per day', '>30 minutes per day')
years_options = c('0-1 years', '1-3 years', '3-5 years', '5+ years')
df.demo = df.demo %>%
mutate(meditation = factor(meditation_exp2, c('Yes', 'No', ''), c('Currently', 'Used to', 'Never')))
### EDUCATION
df.demo = df.demo %>%
mutate(edu.num = as.numeric(factor(edu,
levels=c('Some high school', 'High school', 'Some college',
'2 year degree', '4 year degree', 'Postgraduate/Professional degree/other'))))
### SCALES
battery = c('decisionstyle', 'acs', 'mindfulness', 'sris', 'maia')
max.vals = c(5,4,4,6,6)
# which ones are reversed?
ds.reversed = 6:10
#acs.reversed = c(1,2,3,5,6,8)
acs.reversed = c(1, 2, 3, 6, 7, 8, 11, 12, 15, 16, 20)
mindfulness.reversed = c(2,6,7)
sris.reversed = c(1, 2, 4, 7, 14, 16, 17, 18, 19)
maia.reversed = c()
#ipip.reversed = c(6:10, 17:20, 27:30, 33:40, 48:50)
#bidr.reversed = c(1,3,5,8,9,11,12,13)
reversed = list(ds.reversed, acs.reversed, mindfulness.reversed, sris.reversed, maia.reversed)
# which factors?
ds.factors = c(rep('deliberative',5), rep('intuitive',5))
#acs.factors = c(rep('focusing', 5), rep('shifting', 5))
acs.factors = c(rep('focusing',9), rep('shifting',11))
mindfulness.factors = c('attention', 'present focus', 'acceptance', 'acceptance', 'awareness',
'attention', 'present focus', 'awareness', 'awareness', 'acceptance', 'present focus', 'attention')
sris.factors = c(rep('tendency',12), rep('insight',8))
maia.factors = c(rep('noticing',4),rep('attention regulation',7),rep('emotional awareness',5),rep('body listening',3),rep('trusting',3))
#ipip.factors = c(rep('extraversion',10), rep('agreeableness',10), rep('conscientiousness',10),
#                 rep('stability',10), rep('openness',10))
factors = list(ds.factors, acs.factors, mindfulness.factors, sris.factors, maia.factors)
for (battery.ind in 1:length(battery)) {
name = battery[battery.ind]
reversed.cur = reversed[[battery.ind]]
factors.cur = factors[[battery.ind]]
factors.unique = unique(factors.cur)
max.val.cur = max.vals[battery.ind]
df.demo.followup[,name] = NA
df.demo[,name] = NA
for (i in 1:nrow(df.demo.followup)) {
resp.str = df.demo.followup[i, paste0(name, '_responses')]
if (!is.null(resp.str)) {
demo.row = df.demo$subject == df.demo.followup$subject[i]
resp = as.numeric.vector(resp.str)
resp[reversed.cur] = max.val.cur - resp[reversed.cur] + 1
df.demo.followup[i,name] = mean(resp)
df.demo[demo.row,name] = mean(resp)
for (fac in factors.unique) {
which.items = which(factors.cur == fac)
df.demo.followup[i,paste0(name, '.', fac)] = mean(resp[which.items])
df.demo[demo.row,paste0(name, '.', fac)] = mean(resp[which.items])
}
}
}
}
# choice.domain.fac = factor(choice_domain > median(choice_domain), c(F,T), c('Low', 'High')),
# decisionstyle.fac = factor(decisionstyle > median(decisionstyle), c(F,T), c('Low', 'High')),
# mindfulness.fac = factor(mindfulness > median(mindfulness), c(F,T), c('Low', 'High')),
# sk.fac = factor(sk > median(sk), c(F,T), c('Low', 'High')),
# bidr.fac = factor(bidr > median(bidr), c(F,T), c('Low', 'High')),
# acs.fac = factor(acs > median(acs), c(F,T), c('Low', 'High')),
### COMPREHENSION CHECKS
demo.colnames = colnames(df.demo)
for (i in 1:nrow(df.demo)) {
# b/c of bug in pilot2.. can be removed for later
#df.demo$binatts_comp1_number[i] = ifelse(grepl(".*Xavier.*", df.demo$binatts_comp1_description[i]),
#1, 2)
#df.demo$binatts_comp2_number[i] = ifelse(grepl(".*Xavier.*", df.demo$binatts_comp2_description[i]),
#1, 2)
if (df.demo$lex_comp1_number[i] == 2) {
demo.colnames.temp1 = demo.colnames[grepl("lex_comp1.*", demo.colnames)]
demo.colnames.temp2 = demo.colnames[grepl("lex_comp2.*", demo.colnames)]
values.temp = df.demo[i,demo.colnames.temp1]
df.demo[i,demo.colnames.temp1] = df.demo[i,demo.colnames.temp2]
df.demo[i,demo.colnames.temp2] = values.temp
}
if (df.demo$binwts_comp1_number[i] == 2) {
demo.colnames.temp1 = demo.colnames[grepl("binwts_comp1.*", demo.colnames)]
demo.colnames.temp2 = demo.colnames[grepl("binwts_comp2.*", demo.colnames)]
values.temp = df.demo[i,demo.colnames.temp1]
df.demo[i,demo.colnames.temp1] = df.demo[i,demo.colnames.temp2]
df.demo[i,demo.colnames.temp2] = values.temp
}
if (df.demo$binatts_comp1_number[i] == 2) {
demo.colnames.temp1 = demo.colnames[grepl("binatts_comp1.*", demo.colnames)]
demo.colnames.temp2 = demo.colnames[grepl("binatts_comp2.*", demo.colnames)]
values.temp = df.demo[i,demo.colnames.temp1]
df.demo[i,demo.colnames.temp1] = df.demo[i,demo.colnames.temp2]
df.demo[i,demo.colnames.temp2] = values.temp
}
}
colnames.temp = c('lex_comp1', 'lex_comp2', 'binwts_comp1', 'binwts_comp2', 'binatts_comp1', 'binatts_comp2')
df.cc = df.demo %>% select(subject, strat_q_order, colnames.temp) %>% pivot_longer(colnames.temp)
df.cc = df.cc %>% mutate(answer = ifelse(grepl(".*1.*", name), 0, 100),
correct = (answer == 0 & value < 50) | (answer == 100 & value > 50))
ggplot(df.cc, aes(x = value)) +
geom_histogram() +
geom_vline(aes(xintercept = answer), color = 'red', linetype = 'dashed') +
geom_vline(aes(xintercept = 50), color = 'black', linetype = 'dashed') +
facet_wrap(~name)
df.cc.question = df.cc %>% group_by(name) %>%
summarize(correct = mean(correct), correct.se = se.prop(correct))
df.cc.question
df.cc.order = df.cc %>% group_by(strat_q_order, name) %>%
summarize(correct = mean(correct), correct.se = se.prop(correct))
df.cc.order %>% filter(name == 'binwts_comp1')
df.cc.subj = df.cc %>% group_by(subject) %>%
summarize(correct.total = sum(correct),
correct.without.binatts1 = sum(ifelse(name == 'binatts_comp1', 0, correct)),
correct.lex = sum(ifelse(grepl('lex_comp.*', name), correct, 0)),
correct.binwts = sum(ifelse(grepl('binwts_comp.*', name), correct, 0)),
correct.binatts = sum(ifelse(grepl('binatts_comp.*', name), correct, 0)))
for (i in 1:nrow(df.demo)) {
cc.row = df.cc.subj$subject == df.demo$subject[i]
df.demo$cc.correct.total[i] = df.cc.subj$correct.total[cc.row]
df.demo$cc.correct.lex[i] = df.cc.subj$correct.lex[cc.row]
df.demo$cc.correct.binwts[i] = df.cc.subj$correct.binwts[cc.row]
df.demo$cc.correct.binatts[i] = df.cc.subj$correct.binatts[cc.row]
}
movie_scale = c('Very Bad', 'Bad', 'Moderate', 'Good', 'Very Good')
## Stage 1 choices
# make wide df, put each attribute in its own column
atts = unique(df.attributes$attribute)
att.nums = 1:length(atts)
att.nums.str = as.character(att.nums)
atts.opt1 = paste0(atts,'.opt1')
atts.opt2 = paste0(atts,'.opt2')
atts.opt1.enclosed = paste0('`',atts.opt1,'`')
atts.opt2.enclosed = paste0('`',atts.opt2,'`')
atts.opt.diff = paste0(atts,'.diff')
atts.opt.diff.enclosed = paste0('`',atts.opt.diff,'`')
df.s1[,atts.opt1] = NA
df.s1[,atts.opt2] = NA
df.avail.atts = data.frame(matrix(0,nrow = nrow(df.s1), ncol = length(atts)+1))
colnames(df.avail.atts) = c('subject.num', atts.opt1)
df.avail.atts$subject.num = df.s1$subject.num
for (i in 1:nrow(df.s1)) {
cur.atts = as.string.vector(df.s1$attributes[i])
cur.opt1.vals = as.string.vector(df.s1$opt1_values[i])
cur.opt2.vals = as.string.vector(df.s1$opt2_values[i])
cur.att.nums = numeric(length(cur.atts))
cur.atts.order = numeric(length(cur.atts))
for (j in 1:length(cur.atts)) {
#att.row = df.attributes$subject == df.s1$subject[i] & df.attributes$attribute == cur.atts[j]
cur.att.nums[j] = which(cur.atts[j] == atts)
first = floor(as.numeric(cur.opt1.vals[j])/20)
if (first < 0) {
first = 0;
} else if (first > 4) {
first = 4;
}
second = floor(as.numeric(cur.opt2.vals[j])/20)
if (second < 0) {
second = 0;
} else if (second > 4) {
second = 4;
}
df.s1[i,atts.opt1[cur.att.nums[j]]] = movie_scale[first+1]
df.s1[i,atts.opt2[cur.att.nums[j]]] = movie_scale[second+1]
df.avail.atts[i,atts.opt1[cur.att.nums[j]]] = 1
cur.atts.order[j] = which(atts[j] == cur.atts)
}
df.s1$atts.order[i] = as.string(cur.atts.order)
df.s1$att.nums[i] = as.string(cur.att.nums)
}
# convert attribute values to numerics
for (i in 1:length(atts)) {
cur.att.opt1 = atts.opt1[i]
cur.att.opt2 = atts.opt2[i]
cur.scale = movie_scale#unique(df.attributes$scale[df.attributes$attribute == atts[i]])
if (is.na(cur.scale) || cur.scale == "") {
df.s1[,cur.att.opt1] = as.numeric(sub('\\%.*', '', df.s1[,cur.att.opt1]))
df.s1[,cur.att.opt2] = as.numeric(sub('\\%.*', '', df.s1[,cur.att.opt2]))
} else {
cur.scale = unlist(strsplit(cur.scale, split = ","))
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], cur.scale))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], cur.scale))
}
}
# compute diffs
for (i in 1:length(atts)) {
df.s1[,paste0(atts[i], '.diff')] = df.s1[,atts.opt2[i]] - df.s1[,atts.opt1[i]]
}
# create scaled df.s1 with normalized attribute values (per subject)
df.s1.scaled = df.s1
for (i in df.s1$subject.num) {
subj.rows = df.s1$subject.num == i
df.s1.scaled[subj.rows, c(atts.opt1, atts.opt2, atts.opt.diff)] = scale(df.s1[subj.rows, c(atts.opt1, atts.opt2, atts.opt.diff)])
}
# same thing, except get rid of nan's
df.s1.scaled.nonan = df.s1.scaled
for (i in 1:ncol(df.s1.scaled)) {
df.s1.scaled.nonan[is.na(df.s1.scaled.nonan[,i]),i] = 0
}
df.s1.subj = df.s1 %>%
group_by(subject) %>%
summarize(total.time = sum(rt) / 60000,
pct_left = mean(choice == 0),
median_rt = median(rt),
sd_rt = sd(rt),
num_trials = n())
i= 1
cur.att = df.attributes$attribute[i]
subj = df.attributes$subject[i]
#cur.scale = df.attributes$scale[i]
cur.scale = movie_scale
rows.demo = df.demo$subject == subj
rows.s2.wad = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'wad_att_rating'
rows.s2.ew = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'ew_att_rating'
rows.s2.lex = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'lex_att_rating'
rows.s2.direction = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'direction'
df.s2$rating[rows.s2.direction]
df.s2$rating[rows.s2.direction][1]
for (i in 1:nrow(df.attributes)) {
cur.att = df.attributes$attribute[i]
subj = df.attributes$subject[i]
#cur.scale = df.attributes$scale[i]
cur.scale = movie_scale
rows.demo = df.demo$subject == subj
rows.s2.wad = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'wad_att_rating'
rows.s2.ew = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'ew_att_rating'
rows.s2.lex = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'lex_att_rating'
rows.s2.direction = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'direction'
# if this is the one...
if (any(rows.s2.lex)) {
df.attributes$rating.lex[i] = 1 # should be 1
} else {
df.attributes$rating.lex[i] = 0
}
if (any(rows.s2.ew)) {
df.attributes$rating.ew[i] = 1 # should be 1
} else {
df.attributes$rating.ew[i] = 0
}
df.attributes$rating.wad[i] = df.s2$rating[rows.s2.wad] / 100
# if (is.na(cur.scale) || cur.scale == "") {
#   least = as.numeric(sub('\\%.*', '', df.s2$least_preferred[rows.s2.direction]))
#   most = as.numeric(sub('\\%.*', '', df.s2$most_preferred[rows.s2.direction]))
#   bounds = c(df.attributes$lb[i], df.attributes$ub[i])
# } else {
#   cur.scale = unlist(strsplit(cur.scale, ","))
#   least = which(df.s2$least_preferred[rows.s2.direction] == cur.scale)
#   most = which(df.s2$most_preferred[rows.s2.direction] == cur.scale)
#   bounds = c(1, length(cur.scale))
# }
df.attributes$most[i] = NA
df.attributes$least[i] = NA
df.attributes$direction[i] = ifelse(df.s2$rating[rows.s2.direction][1] == 1, 1, -1)
df.attributes$same[i] = F#most == least
#df.attributes$linear[i] = least %in% bounds & most %in% bounds
df.attributes$linear[i] = all(df.s2$rating[rows.s2.direction] == 1)
# df.attributes$almost.linear[i] =
#   (least %in% bounds | (least+1) %in% bounds | (least-1) %in% bounds) &
#   (most %in% bounds | (most+1) %in% bounds | (most-1) %in% bounds)
df.attributes$lex_real[i] = df.demo$lex_real[rows.demo]
df.attributes$binwts_real[i] = df.demo$binwts_real[rows.demo]
df.attributes$binatts_real[i] = df.demo$binatts_real[rows.demo]
df.attributes$chosen.oneatt[i] = df.demo$chosen.oneatt[rows.demo]
df.attributes$chosen.binwts[i] = df.demo$chosen.binwts[rows.demo]
df.attributes$chosen.binatts[i] = df.demo$chosen.binatts[rows.demo]
df.attributes$chosen.model[i] = df.demo$chosen.model[rows.demo]
df.attributes$chosen.model.num[i] = df.demo$chosen.model.num[rows.demo]
df.attributes$chosen.model.fac[i] = df.demo$chosen.model.fac[rows.demo]
df.attributes$rating.chosen[i] = ifelse(df.demo$chosen.oneatt[rows.demo] == 'One',
df.attributes$rating.lex[i],
ifelse(df.demo$chosen.binwts[rows.demo] == 'Binary',
df.attributes$rating.ew[i],
df.attributes$rating.wad[i]))
}
df.attributes = df.attributes %>%
mutate(rating.wad.signed = rating.wad * direction,
rating.ew.signed = rating.ew * direction,
rating.lex.signed = rating.lex * direction,
rating.chosen.signed = rating.chosen * direction)
df.browser = read.csv('browser_events.csv', stringsAsFactors = F)
df.browser.subj = df.browser %>%
filter(browser_event == 'blur') %>%
group_by(subject) %>%
summarize(num.blur = n())
exclude.subj = c()
for (subj in subjlist) {
demo.row = df.demo$subject == subj
s1.subj = df.s1.subj$subject == subj
browser.row = df.browser.subj$subject == subj
if (df.demo$instruction_times_median[demo.row] < 2 |
df.s1.subj$pct_left[s1.subj] > .8 |
df.s1.subj$pct_left[s1.subj] < .2 |
df.s1.subj$num_trials[s1.subj] != 100 |
df.demo$attention[demo.row] < 50 |
#df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0 |
#df.demo$below.chance[demo.row] |
#subj %in% exclude.subj.ant |
#(!is.na(df.demo$instruction_times_followup_median[demo.row]) && df.demo$instruction_times_followup_median[demo.row] < 2) |
(any(browser.row) && df.browser.subj$num.blur[df.browser.subj$subject == subj] > 20)) {
exclude.subj = c(exclude.subj, subj)
}
}
df.demo.filt = df.demo %>% filter(!(subject %in% exclude.subj))
df.s1.filt = df.s1 %>% filter(!(subject %in% exclude.subj))
df.s1.subj.filt = df.s1.subj %>% filter(!(subject %in% exclude.subj))
df.s1.practice.filt = df.s1.practice %>% filter(!(subject %in% exclude.subj))
df.s2.filt = df.s2 %>% filter(!(subject %in% exclude.subj))
df.attributes.filt = df.attributes %>% filter(!(subject %in% exclude.subj))
df.attributes.subj.filt = df.attributes.subj %>% filter(!(subject %in% exclude.subj))
df.cv.filt = df.cv %>% filter(!(subject %in% exclude.subj))
df.cv.norm.filt = df.cv.norm %>% filter(!(subject %in% exclude.subj))
df.cv.best.filt = df.cv.best %>% filter(!(subject %in% exclude.subj))
df.cc.filt = df.cc %>% filter(!(subject %in% exclude.subj))
df.cc.subj.filt = df.cc.subj %>% filter(!(subject %in% exclude.subj))
## linearity
mean(df.attributes.filt$linear[df.attributes.filt$rating.wad > .1])
hist(df.attributes$direction)
View(df.demo)
