panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
ggplot(df.demo, aes(x = best.model.fac, fill = chosen.model.fac)) +
geom_bar(position = 'dodge') +
labs(x = '', y = '') +
guides(fill = guide_legend(title = 'Reported model', title.position = 'top', title.hjust = .5)) +
theme(legend.position = 'top') +
scale_y_continuous(breaks = NULL)
ggplot(df.demo, aes(x = acs, y = accuracy)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = "Attentional Control Scale\nscore", y = "Parameter awareness\nscore") +
scale_x_continuous(breaks = c(20,100), limits = c(20,100)) +
scale_y_continuous(breaks = c(0,1), limits = c(0,1))
ggplot(df.demo, aes(x = acs, y = accuracy)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = "Attentional Control Scale\nscore", y = "Parameter awareness\nscore") +
scale_x_continuous(breaks = c(20,100), limits = c(20,100)) +
scale_y_continuous(breaks = c(0,1), limits = c(0,1))
ggplot(df.demo, aes(x = acs, y = chosen.model.ll)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = "Attentional Control Scale\nscore", y = "Process awareness\nscore") +
scale_x_continuous(breaks = c(20,100), limits = c(20,100)) +
scale_y_continuous(breaks = c(-2,-1,0,1), limits = c(-2,1.4))
ggplot(df.demo, aes(x = acs, y = chosen.model.ll)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = "Attentional Control Scale\nscore", y = "Process awareness\nscore") +
scale_x_continuous(breaks = c(20,100), limits = c(20,100)) +
scale_y_continuous(breaks = c(-2,-1,0,1), limits = c(-2,1.4))
summary(m.acs1)
m.acs1 = lm(accuracy ~ acs, data = df.demo)
summary(m.acs1)
standardize_parameters(m.acs1)
summary(m.acs1)
ggplot(df.demo, aes(x = acs, y = chosen.model.ll)) +
geom_point() +
geom_smooth(method='lm', color = 'black') +
labs(x = "Attentional Control Scale\nscore", y = "Process awareness\nscore") +
scale_x_continuous(breaks = c(20,100), limits = c(20,100)) +
scale_y_continuous(breaks = c(-2,-1,0,1), limits = c(-2,1.4))
m.acs2 = glm(chose.correct.model ~ acs, data = df.demo, family = 'binomial')
summary(m.acs2)
standardize_parameters(m.acs2)
# Setup -------------------------------------------------------------------
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
require(RColorBrewer)
standardize_parameters(m.acs1)
standardize_parameters(m.acs2)
load("/Users/adam/Me/Psychology/Projects/completed/choicesets/git2/experiments/food/study1_output.rdata")
# load packages with groundhog (http://groundhogr.com/)
# start a new R session before doing this!
# if you get this (or any other) error:
# "groundhog says: 11 of the 21 packages needed by 'dplyr_0.8.4' are currently loaded, but not with the version that is needed."
# then run "rm(list=ls())", restart your R session, and try again.
#  if you still get the error, then do all the following steps in order:
# switch to R version 4, restart your R session, run "library(groundhog); groundhog.library('dplyr', '2020-06-01')", restart your R session, run "library(groundhog); groundhog.library('dplyr', '2020-03-01')", switch back to R version 3, restart your R session, and try running this script again.
# (I think this is a bug in groundhogr, and I have no idea why this fixes it, but that's what worked for me.)
library(groundhog)
pkgs = c('dplyr', 'tidyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist', 'rje')
groundhog.library(pkgs, '2020-03-01')
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v4/pilot2/analysis.rdata")
df.demo.heat = df.demo %>% group_by(chosen.model.fac, best.model.fac) %>%
summarize(num.subj = n())
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
require(RColorBrewer)
require(dplyr)
require(tidyr)
require(forcats)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = base_size, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
get.ci = function(x) {return(c(mean(x,na.rm = T) - 1.96*se(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se(x)))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(gsub('\\[|\\]','',x),',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ggplot(df.demo.filt, aes(x = best.model.fac, fill = chosen.model.fac)) +
geom_bar(position = 'dodge') +
labs(x = 'Best fitted model', y = '') +
guides(fill = guide_legend(title = 'Reported model', title.position = 'top', title.hjust = .5)) +
theme(legend.position = 'top') +
scale_y_continuous(breaks = NULL)
df.demo.heat = df.demo %>% group_by(chosen.model.fac, best.model.fac) %>%
summarize(num.subj = n())
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\nSelf-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\nSelf-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
guides(fill = guide_colorbar(title = '# of subjects'))
other.names = c('Full\nweighting', 'In-or-out', 'Weighted\ntallying', 'Tallying', 'Single\nattribute')
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of\nsubjects', size = 22)) +
theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
m.mods = glm(chose.correct.model ~ decisionstyle + mindfulness + sris.tendency + sris.insight +
maia + acs.shifting + acs.focusing + icar_num_correct + gender + age + meditation_exp1 +
alerting + orienting + exec +
choice_domain + confidence + consistency2 +
chosen.model.fac + avg.model.ll,
data = df.demo.filt, family = 'binomial')
summary(m.mods)
## compare process w/ parameter awareness
df.demo.correct = df.demo.filt %>% group_by(chose.correct.model) %>%
summarize(accuracy.m = mean(accuracy.best.best, na.rm = T), accuracy.se = se(accuracy.best.best))
ggplot(df.demo.filt, aes(x = chose.correct.model, y = accuracy.best.best)) +
geom_violin() +
geom_point(data = df.demo.correct, aes(y = mse.m)) +
geom_errorbar(data = df.demo.correct,
aes(y = mse.m, ymin = mse.m - mse.se, ymax = mse.m + mse.se),
width = .1)
ggplot(df.demo.filt, aes(x = chose.correct.model, y = accuracy.best.best)) +
geom_violin()
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'gray') +
geom_smooth(method='lm', color = 'gray') +
theme_black() +
labs(x = '\nAvg likelihood of chosen model\n(normalized so worst model = 0 and best model = 1)',
y = 'Mean squared error\n(compared to params of reported model)')
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.best.best)) +
geom_point(color = 'gray') +
geom_smooth(method='lm', color = 'gray') +
theme_black() +
labs(x = '\nAvg likelihood of chosen model\n(normalized so worst model = 0 and best model = 1)',
y = 'Mean squared error\n(compared to params of reported model)')
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'gray') +
geom_smooth(method='lm', color = 'gray') +
theme_black() +
labs(x = '\nAvg likelihood of chosen model\n(normalized so worst model = 0 and best model = 1)',
y = 'Mean squared error\n(compared to params of reported model)')
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'gray') +
geom_smooth(method='lm', color = 'gray') +
labs(x = 'Accuracy about overarching process', y = 'Accuracy about parameters')
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'black') +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Accuracy about overarching process', y = 'Accuracy about parameters')
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'blue') +
geom_smooth(method='lm', color = 'blue') +
labs(x = 'Accuracy about overarching process', y = 'Accuracy about parameters')
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'black') +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Accuracy about overarching process', y = 'Accuracy about parameters')
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'black') +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Accuracy about overarching process', y = 'Accuracy about parameters') +
scale_x_continuous(breaks = c(0,1))
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'black') +
geom_smooth(method='lm', color = 'black') +
labs(x = 'Accuracy about overarching process', y = 'Accuracy about parameters') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'black') +
geom_smooth(method='lm', color = 'black', se = F) +
labs(x = 'Accuracy about overarching process', y = 'Accuracy about parameters') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
#theme_black() +
#labs(x = '\nAvg likelihood of chosen model\n(normalized so worst model = 0 and best model = 1)',
#y = 'Mean squared error\n(compared to params of reported model)')
summary(lm(scale(accuracy.chosen.chosen) ~ scale(chosen.model.ll), data = df.demo.filt))
ggplot(df.demo.filt, aes(x = chosen.model.ll, y = accuracy.chosen.chosen)) +
geom_point(color = 'black') +
geom_smooth(method='lm', color = 'black', se = F) +
labs(x = 'Accuracy about\noverarching process', y = 'Accuracy about\nparameters') +
scale_x_continuous(breaks = c(0,1)) +
scale_y_continuous(breaks = c(0,1))
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\nSelf-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
guides(fill = guide_colorbar(title = '# of subjects')) #+
## by feature
# lex
df.feature.oneatt = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(lex_real.m = mean(lex_real),
lex_real.se = se(lex_real))
df.feature.oneatt.cc = df.demo.filt %>%
filter(cc.correct.lex == 2) %>%
group_by(best.model.oneatt) %>%
summarize(lex_real.m = mean(lex_real),
lex_real.se = se(lex_real))
ggplot(df.demo.filt, aes(x = lex_real, group = best.model.oneatt, fill = best.model.oneatt)) +
geom_histogram(alpha = .5, position = 'identity')
ggplot(df.demo.filt %>% filter(cc.correct.lex == 2), aes(x = lex_real, group = best.model.oneatt, fill = best.model.oneatt)) +
geom_histogram(alpha = .5, position = 'identity')
ggplot(df.feature.oneatt.cc, aes(x = best.model.oneatt, y = lex_real.m)) +
geom_point() +
geom_errorbar(aes(ymin = lex_real.m - lex_real.se, ymax = lex_real.m + lex_real.se))
ggplot(df.feature.oneatt, aes(x = best.model.oneatt, y = lex_real.m)) +
geom_point() +
geom_errorbar(aes(ymin = lex_real.m - lex_real.se, ymax = lex_real.m + lex_real.se))
ggplot(df.feature.oneatt.cc, aes(x = best.model.oneatt, y = lex_real.m)) +
geom_point() +
geom_errorbar(aes(ymin = lex_real.m - lex_real.se, ymax = lex_real.m + lex_real.se))
mean(df.demo.filt$chosen.oneatt == df.demo.filt$best.model.oneatt)
ggplot(df.demo.filt, aes(x = chosen.model.ll)) +
geom_histogram(color = 'white', bins = 25) +
labs(x = "\nOOS likelihood of reported model\n(normalized so worst model = 0, best = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean(df.demo.filt$chosen.model.ll), linetype = 1, color = 'gray') +
geom_vline(xintercept = mean(rand.lls), linetype = 'dashed', color = 'gray')
pct.correct = mean(df.demo.filt$chose.correct.model[df.demo.filt$sd.model.ll > median(df.demo.filt$sd.model.ll)])
pct.correct.se = se.prop(df.demo.filt$chose.correct.model)
c(pct.correct - 1.96 * pct.correct.se, pct.correct, pct.correct + 1.96 * pct.correct.se)
1/6
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of\nsubjects', size = 22)) +
theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
other.names = c('Full\nweighting', 'In-or-out', 'Weighted\ntallying', 'Tallying', '1 graded\nattribute', '1 binary\nattribute')
ggplot(df.demo.heat, aes(x = chosen.model.fac, y = best.model.fac,
fill = num.subj)) +
geom_tile() +
labs(x = '\nSelf-reported model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'grey87', high = 'dodgerblue4') +
guides(fill = guide_colorbar(title = '# of\nsubjects', size = 22)) +
theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20)) +
scale_x_discrete(labels = other.names) +
scale_y_discrete(labels = other.names)
mean(df.demo.filt$overestimated)
df.demo.filt = df.demo.filt %>%
mutate(overestimated =
(chosen.model.fac == 'Full' & best.model.fac != 'Full') |
(chosen.model.fac %in% c('BinWts', 'BinAtts') & best.model.fac %in% c('BinWtsAtts', '1Att', '1AttBinAtts')) |
(chosen.model.fac == 'BinWtsAtts' & best.model.fac %in% c('1Att', '1AttBinAtts')))
mean(df.demo.filt$overestimated)
## parameter awareness
# across all points
ggplot(df.attributes.filt, aes(x = rating.chosen.signed, y = fitted.weight.chosen)) +
geom_point() +
#theme_black() +
geom_smooth(method='lm',color = 'black') +
labs(x = 'Self-reported weight', y = 'Fitted weight') +
scale_x_continuous(breaks = c(-1, 0, 1))
# binatts
df.feature.binatts = df.demo.filt %>% group_by(best.model.binatts) %>%
summarize(binatts_real.m = mean(binatts_real),
binatts_real.se = se(binatts_real))
df.feature.binatts.cc = df.demo.filt %>%
filter(cc.correct.binatts == 2) %>%
group_by(best.model.binatts) %>%
summarize(binatts_real.m = mean(binatts_real),
binatts_real.se = se(binatts_real))
ggplot(df.feature.binatts.cc, aes(x = best.model.binatts, y = binatts_real.m)) +
geom_point() +
geom_errorbar(aes(ymin = binatts_real.m - binatts_real.se, ymax = binatts_real.m + binatts_real.se))
df.feature.binwts.cc = df.demo.filt %>%
filter(cc.correct.binwts == 2) %>%
group_by(best.model.binwts) %>%
summarize(binwts_real.m = mean(binwts_real),
binwts_real.se = se(binwts_real))
ggplot(df.feature.binwts.cc, aes(x = best.model.binwts, y = binwts_real.m)) +
geom_point() +
geom_errorbar(aes(ymin = binwts_real.m - binwts_real.se, ymax = binwts_real.m + binwts_real.se))
ggplot(df.feature.oneatt.cc, aes(x = best.model.oneatt, y = lex_real.m)) +
geom_point() +
geom_errorbar(aes(ymin = lex_real.m - lex_real.se, ymax = lex_real.m + lex_real.se))
mean(df.demo.filt$best.model.oneatt == 'One')
mean(df.demo.filt$chosen.oneatt == df.demo.filt$best.model.oneatt)
mean(df.demo.filt$chosen.binwts == df.demo.filt$best.model.binwts)
mean(df.demo.filt$chosen.binwts == df.demo.filt$best.model.binwts, na.rm = T)
mean(df.demo.filt$chosen.binatts == df.demo.filt$best.model.binatts)
ggplot(df.feature.binatts, aes(x = best.model.binatts, y = binatts_real.m)) +
geom_point() +
geom_errorbar(aes(ymin = binatts_real.m - binatts_real.se, ymax = binatts_real.m + binatts_real.se))
## by feature
df.demo.filt = df.demo.filt %>%
mutate(correct.oneatt = chosen.oneatt == best.model.oneatt,
correct.binwts = chosen.binwts == best.model.binwts,
correct.binatts = chosen.binatts == best.model.binatts)
df.test = df.demo.filt %>%
summarize(correct.oneatt.m = mean(correct.oneatt))
View(df.test)
mean(df.demo.filt$chosen.binatts == df.demo.filt$best.model.binatts)
se.prop(df.demo.filt$chosen.binatts == df.demo.filt$best.model.binatts)
df.test = df.demo.filt %>%
summarize(correct.oneatt.m = mean(correct.oneatt),
correct.oneatt.se = se.prop(correct.oneatt),
correct.binwts.m = mean(correct.binwts),
correct.binwts.se = se.prop(correct.binwts),
correct.binatts.m = mean(correct.binatts),
correct.binatts.se = se.prop(correct.binatts)
)
df.test
df.test = df.demo.filt %>%
summarize(correct.oneatt.m = mean(correct.oneatt),
correct.oneatt.se = se.prop(correct.oneatt),
correct.binwts.m = mean(correct.binwts,na.rm = T),
correct.binwts.se = se.prop(correct.binwts),
correct.binatts.m = mean(correct.binatts),
correct.binatts.se = se.prop(correct.binatts)
)
df.test
ggplot(df.feature.oneatt, aes(x = best.model.oneatt, y = lex_real.m)) +
geom_point() +
geom_errorbar(aes(ymin = lex_real.m - lex_real.se, ymax = lex_real.m + lex_real.se))
pivot_longer(df.test)
ggplot(df.test, aes(y = correct.oneatt.m)) +
geom_bar()
ggplot(df.test, aes(y = correct.oneatt.m)) +
geom_col()
ggplot(df.test, aes(y = correct.oneatt.m)) +
geom_bar()
df.test
ggplot(df.test, aes(y = correct.oneatt.m)) +
geom_point()
df.better.test$name = c('# of atts', 'Type of weights', 'Type of att. comparison')
df.better.test = NULL
df.better.test$name = c('# of atts', 'Type of weights', 'Type of att. comparison')
df.better.test
View(df.test)
df.better.test = NULL
df.better.test$name = c('# of atts', 'Type of weights', 'Type of att. comparison')
df.better.test$m = c(.566, .468, .614)
df.better.test$se = c(.054, .063, .053)
ggplot(df.better.test, aes(x = name, y = m)) +
geom_point()
df.better.test = data.frame()
df.better.test$name = c('# of atts', 'Type of weights', 'Type of att. comparison')
df.better.test$m = c(.566, .468, .614)
df.better.test = data.frame(3)
View(df.browser)
df.better.test = as.data.frame(matrix(3,3))
df.better.test$name = c('# of atts', 'Type of weights', 'Type of att. comparison')
df.better.test$m = c(.566, .468, .614)
df.better.test$se = c(.054, .063, .053)
ggplot(df.better.test, aes(x = name, y = m)) +
geom_point()
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col()
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se))
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2)
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = '', y = '% correct')
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = 'Question', y = '% correct')
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = 'Question', y = '% correct') +
hline(.5)
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = 'Question', y = '% correct') +
geom_hline(yintercept = .5)
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = 'Question', y = '% correct') +
geom_hline(yintercept = .5, type = 'dashed')
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = 'Question', y = '% correct') +
geom_hline(yintercept = .5, linetype = 'dashed')
df.better.test = as.data.frame(matrix(3,3))
df.better.test$name = c('# of\natts', 'Type of\nweights', 'Type of att.\ncomparison')
df.better.test$m = c(.566, .468, .614)
df.better.test$se = c(.054, .063, .053)
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = 'Question', y = '% correct') +
geom_hline(yintercept = .5, linetype = 'dashed')
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = '', y = '% correct') +
geom_hline(yintercept = .5, linetype = 'dashed')
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = '', y = '% correct') +
geom_hline(yintercept = .5, linetype = 'dashed') +
theme(axis.title.y = element_font(size = 24))
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = '', y = '% correct') +
geom_hline(yintercept = .5, linetype = 'dashed') +
theme(axis.title.y = element_text(size = 24))
ggplot(df.better.test, aes(x = name, y = m)) +
geom_col() +
geom_errorbar(aes(ymin = m - se, ymax = m + se), width = .2) +
labs(x = '', y = '% correct') +
geom_hline(yintercept = .5, linetype = 'dashed') +
theme(axis.title.y = element_text(size = 36))
