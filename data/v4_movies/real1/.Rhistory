geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = accuracy.best.best.m - accuracy.best.best.se,
ymax = accuracy.best.best.m + accuracy.best.best.se),
position = position_dodge(width = .9),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Correct model', y = 'Weight accuracy') +
theme(legend.title = element_blank()) +
facet_wrap(~type) +
scale_fill_brewer(palette = 'Set1')
## process awareness
# by model
models.graph = df.demo.filt.both %>% group_by(type, best.model.fac) %>%
summarize(chose.correct.model.m = mean(chose.correct.model),
chose.correct.model.se = se.prop(chose.correct.model),
accuracy.best.best.m = mean(accuracy.best.best),
accuracy.best.best.se = se(accuracy.best.best))
ggplot(models.graph, aes(x = best.model.fac, y = chose.correct.model.m, fill = type)) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = chose.correct.model.m - chose.correct.model.se,
ymax = chose.correct.model.m + chose.correct.model.se),
position = position_dodge(width = .9),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Correct model', y = '% of participants who\nreported correct model') +
theme(legend.title = element_blank()) +
facet_wrap(~type) +
scale_fill_brewer(palette = 'Set1')
ggplot(models.graph, aes(x = best.model.fac, y = accuracy.best.best.m, fill = type)) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = accuracy.best.best.m - accuracy.best.best.se,
ymax = accuracy.best.best.m + accuracy.best.best.se),
position = position_dodge(width = .9),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Correct model', y = 'Weight accuracy') +
theme(legend.title = element_blank()) +
facet_wrap(~type) +
scale_fill_brewer(palette = 'Set1')
ggplot(models.graph, aes(x = best.model.fac, y = accuracy.best.best.m, fill = type)) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = accuracy.best.best.m - accuracy.best.best.se,
ymax = accuracy.best.best.m + accuracy.best.best.se),
position = position_dodge(width = .9),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Correct model', y = 'Weight accuracy') +
theme(legend.title = element_blank()) +
facet_wrap(~type) +
scale_fill_brewer(palette = 'Set1')
ggplot(models.graph, aes(x = best.model.fac, y = accuracy.best.best.m, fill = type)) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = accuracy.best.best.m - accuracy.best.best.se,
ymax = accuracy.best.best.m + accuracy.best.best.se),
position = position_dodge(width = .9),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Correct model', y = 'Weight accuracy') +
theme(legend.title = element_blank()) +
facet_wrap(~type) +
scale_fill_brewer(palette = 'Set1') +
geom_hline(aes(yintercept = 1/6))
ggplot(models.graph, aes(x = best.model.fac, y = accuracy.best.best.m, fill = type)) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = accuracy.best.best.m - accuracy.best.best.se,
ymax = accuracy.best.best.m + accuracy.best.best.se),
position = position_dodge(width = .9),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Correct model', y = 'Weight accuracy') +
theme(legend.title = element_blank()) +
facet_wrap(~type) +
scale_fill_brewer(palette = 'Set1') +
geom_hline(aes(yintercept = 1/6), color = 'white', linetype = 'dashed')
ggplot(models.graph, aes(x = best.model.fac, y = chose.correct.model.m, fill = type)) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = chose.correct.model.m - chose.correct.model.se,
ymax = chose.correct.model.m + chose.correct.model.se),
position = position_dodge(width = .9),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Correct model', y = '% of participants who\nreported correct model') +
theme(legend.title = element_blank()) +
facet_wrap(~type) +
scale_fill_brewer(palette = 'Set1') +
geom_hline(aes(yintercept = 1/6), color = 'white', linetype = 'dashed')
prop.test(c(sum(df.demo.filt$chose.correct.model, na.rm = T), sum(df.demo.filt.obs$chose.correct.model, na.rm = T)),
c(length(!is.na(df.demo.filt$chose.correct.model)), length(!is.na(df.demo.filt.obs$chose.correct.model))))
ggplot(df.demo.filt.both, aes(x = chosen.model.ll, fill = type, group = type)) +
geom_histogram(color = 'white', alpha = .7, bins = 25, position = position_identity()) +
labs(x = "\nOOS likelihood of reported model\n(normalized so worst model = 0, best = 1)",
y = "# of subjects") +
scale_y_continuous(breaks = NULL) +
theme_black() +
geom_vline(xintercept = mean.orig, linetype = 1, color = '#e3211c') +
geom_vline(xintercept = mean.orig - se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.orig + se.orig, linetype = 'dashed', color = '#e3211c') +
geom_vline(xintercept = mean.obs, linetype = 1, color = '#377eb8') +
geom_vline(xintercept = mean.obs - se.obs, linetype = 'dashed', color = '#377eb8') +
geom_vline(xintercept = mean.obs + se.obs, linetype = 'dashed', color = '#377eb8') +
scale_fill_brewer(palette = 'Set1') +
theme(legend.title = element_blank())
summary(lm(chosen.model.ll ~ type, df.demo.filt.both))
## moderators
# IQ
ggplot(df.demo.filt.both, aes(x = icar_num_correct, y = accuracy.best.best, color = type)) +
geom_point() +
geom_smooth(method='lm', color = 'white') +
theme_black() +
labs(x = 'IQ score', y = 'Weight accuracy') +
facet_wrap(~type,ncol = 1) +
scale_color_brewer(palette = 'Set1')
ggplot(df.demo.filt.both, aes(x = icar_num_correct, y = chosen.model.ll, color = type)) +
geom_point() +
geom_smooth(method='lm', color = 'white') +
theme_black() +
labs(x = 'IQ score', y = 'Weight accuracy') +
facet_wrap(~type,ncol = 1) +
scale_fill_brewer(palette = 'Set1')
df.demo.filt$type = 'Original'
df.demo.filt.obs$type = 'Observers'
df.demo.filt.both = full_join(df.demo.filt, df.demo.filt.obs)
df.demo.filt.both = df.demo.filt.both %>% mutate(type = factor(type, c('Original', 'Observers'), c('Original', 'Observers')))
## moderators
# IQ
ggplot(df.demo.filt.both, aes(x = icar_num_correct, y = accuracy.best.best, color = type)) +
geom_point() +
geom_smooth(method='lm', color = 'white') +
theme_black() +
labs(x = 'IQ score', y = 'Weight accuracy') +
facet_wrap(~type,ncol = 1) +
scale_color_brewer(palette = 'Set1')
ggplot(df.demo.filt.both, aes(x = icar_num_correct, y = chosen.model.ll, color = type)) +
geom_point() +
geom_smooth(method='lm', color = 'white') +
theme_black() +
labs(x = 'IQ score', y = 'Weight accuracy') +
facet_wrap(~type,ncol = 1) +
scale_fill_brewer(palette = 'Set1')
load('observer_results.rdata')
df.demo.filt$type = 'Original'
df.demo.filt.obs$type = 'Observers'
df.demo.filt.both = full_join(df.demo.filt, df.demo.filt.obs)
df.demo.filt.both = df.demo.filt.both %>% mutate(type = factor(type, c('Original', 'Observers'), c('Original', 'Observers')))
## moderators
# IQ
ggplot(df.demo.filt.both, aes(x = icar_num_correct, y = accuracy.best.best, color = type)) +
geom_point() +
geom_smooth(method='lm', color = 'white') +
theme_black() +
labs(x = 'IQ score', y = 'Weight accuracy') +
facet_wrap(~type,ncol = 1) +
scale_color_brewer(palette = 'Set1')
summary(lm(scale(chosen.model.ll) ~ scale(icar_num_correct) + best.model.fac + best.model.ll.magnitude, df.demo.filt.obs))
summary(lm(scale(accuracy.best.best) ~ scale(icar_num_correct) + best.model.fac + best.model.ll.magnitude, df.demo.filt.obs))
summary(lm(scale(accuracy.best.best) ~ scale(icar_num_correct) + best.model.fac + scale(best.model.ll.magnitude), df.demo.filt.obs))
summary(glm(chose.correct.model ~ scale(icar_num_correct) + best.model.fac + best.model.ll.magnitude, df.demo.filt.obs, family = 'binomial'))
summary(lm(scale(accuracy.best.best) ~ scale(icar_num_correct) + best.model.fac + scale(best.model.ll.magnitude), df.demo.filt))
summary(lm(scale(accuracy.best.best) ~ scale(icar_num_correct) * type + best.model.fac + scale(best.model.ll.magnitude), df.demo.filt.both))
summary(glm(chose.correct.model ~ scale(icar_num_correct)*type + best.model.fac + best.model.ll.magnitude, df.demo.filt.both, family = 'binomial'))
summary(lm(scale(chosen.model.ll) ~ scale(icar_num_correct)*type + best.model.fac + scale(best.model.ll.magnitude), df.demo.filt.both))
summary(lm(scale(accuracy.best.best) ~ scale(icar_num_correct) + best.model.fac + scale(best.model.ll.magnitude), df.demo.filt))
# others
ggplot(df.demo.filt, aes(x = choice_domain, y = accuracy.best.best)) +
geom_point(color='gray') +
geom_smooth(method='lm', color = 'white') +
theme_black() +
labs(x = '\nExperience with choosing\nhomes to rent', y = 'Parameter accuracy') +
scale_x_continuous(breaks = c(0,50,100)) +
scale_y_continuous(breaks = c(0,.5,1))
summary(lm(scale(accuracy.best.best) ~ scale(choice_domain) +
best.model.fac + best.model.ll.magnitude, data = df.demo.filt))
ggplot(df.demo.filt, aes(x = choice_domain, y = chosen.model.ll)) +
geom_point() +
geom_smooth(method='lm')
ggplot(df.demo.filt, aes(x = choice_domain, y = chosen.model.ll)) +
geom_point() +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nExperience with choosing\nhomes to rent', y = 'Weight accuracy')
ggplot(df.demo.filt, aes(x = choice_domain, y = chosen.model.ll)) +
geom_point(color='gray') +
geom_smooth(method='lm') +
theme_black() +
labs(x = '\nExperience with choosing\nhomes to rent', y = 'Weight accuracy')
ggplot(df.demo.filt, aes(x = choice_domain, y = chosen.model.ll)) +
geom_point(color='gray') +
geom_smooth(method='lm',color='white') +
theme_black() +
labs(x = '\nExperience with choosing\nhomes to rent', y = 'Weight accuracy')
ggplot(df.demo.filt, aes(x = choice_domain, y = chosen.model.ll)) +
geom_point(color='gray') +
geom_smooth(method='lm',color='white') +
theme_black() +
labs(x = '\nExperience with choosing\nhomes to rent', y = 'Weight accuracy') +
scale_x_continuous(breaks = c(0,50,100)) +
scale_y_continuous(breaks = c(0,.5,1))
# others
ggplot(df.demo.filt, aes(x = choice_domain, y = accuracy.best.best)) +
geom_point(color='gray') +
geom_smooth(method='lm', color = 'white') +
theme_black() +
labs(x = '\nExperience with choosing\nhomes to rent', y = 'Weight accuracy') +
scale_x_continuous(breaks = c(0,50,100)) +
scale_y_continuous(breaks = c(0,.5,1))
ggplot(df.demo.filt, aes(x = choice_domain, y = chosen.model.ll)) +
geom_point(color='gray') +
geom_smooth(method='lm',color='white') +
theme_black() +
labs(x = '\nExperience with choosing\nhomes to rent', y = 'OOS likelihood of reported model') +
scale_x_continuous(breaks = c(0,50,100)) +
scale_y_continuous(breaks = c(0,.5,1))
ggplot(test, aes(x = chose.correct.model, y = pct.features.norm.m)) +
geom_point(size = 5, color = 'white') +
geom_errorbar(aes(ymin = pct.features.norm.m - pct.features.norm.se,
ymax = pct.features.norm.m + pct.features.norm.se),
width = .2, color = 'white') +
scale_x_discrete(labels = c('No', 'Yes')) +
labs(x = 'Reported correct\nmodel', y = '% of process properties\nthat were\nnormatively aligned') +
theme_black()
test = df.demo.filt.obs %>% group_by(chose.correct.model) %>%
summarize(pct.features.norm.m = mean(pct.features.norm),
pct.features.norm.se = se(pct.features.norm),
pct.features.norm.reported.m = mean(pct.features.norm.reported),
pct.features.norm.reported.se = se(pct.features.norm.reported),)
ggplot(test, aes(x = chose.correct.model, y = pct.features.norm.m)) +
geom_point(size = 5, color = 'white') +
geom_errorbar(aes(ymin = pct.features.norm.m - pct.features.norm.se,
ymax = pct.features.norm.m + pct.features.norm.se),
width = .2, color = 'white') +
scale_x_discrete(labels = c('No', 'Yes')) +
labs(x = 'Reported correct\nmodel', y = '% of strategy properties\nthat were\nnormatively aligned') +
theme_black()
test = df.demo.filt.obs %>% group_by(chose.correct.model) %>%
summarize(pct.features.norm.m = mean(pct.features.norm),
pct.features.norm.se = se(pct.features.norm),
pct.features.norm.reported.m = mean(pct.features.norm.reported),
pct.features.norm.reported.se = se(pct.features.norm.reported),)
df.demo.filt = df.demo.filt %>% mutate(
oneatt.correct = chosen.oneatt == best.model.oneatt,
binwts.correct = chosen.binwts == best.model.binwts,
binatts.correct = chosen.binatts == best.model.binatts,
norm.oneatt = factor(lex_norm > 50, c(F,T), one.att.levels),
norm.binwts = factor(binwts_norm > 50, c(F,T), bin.wts.levels),
norm.binatts = factor(binatts_norm > 50, c(F,T), bin.wts.levels),
oneatt.norm.actual = norm.oneatt == best.model.oneatt,
binwts.norm.actual = norm.binwts == best.model.binwts,
binatts.norm.actual = norm.binatts == best.model.binatts,
oneatt.norm.reported = norm.oneatt == chosen.oneatt,
binwts.norm.reported = norm.binwts == chosen.binwts,
binatts.norm.reported = norm.binatts == chosen.binatts) %>%
rowwise() %>%
mutate(
num.features.correct = sum(c(oneatt.correct, binwts.correct, binatts.correct), na.rm = T),
pct.features.correct = mean(c(oneatt.correct, binwts.correct, binatts.correct), na.rm = T),
pct.features.norm = mean(c(oneatt.norm.actual, binwts.norm.actual, binatts.norm.actual), na.rm = T),
pct.features.norm.reported = mean(c(oneatt.norm.reported, binwts.norm.reported, binatts.norm.reported), na.rm = T)
)
test = df.demo.filt %>% group_by(chose.correct.model) %>%
summarize(pct.features.norm.m = mean(pct.features.norm),
pct.features.norm.se = se(pct.features.norm),
pct.features.norm.reported.m = mean(pct.features.norm.reported),
pct.features.norm.reported.se = se(pct.features.norm.reported),)
ggplot(test, aes(x = chose.correct.model, y = pct.features.norm.m)) +
geom_point(size = 5, color = 'white') +
geom_errorbar(aes(ymin = pct.features.norm.m - pct.features.norm.se,
ymax = pct.features.norm.m + pct.features.norm.se),
width = .2, color = 'white') +
scale_x_discrete(labels = c('No', 'Yes')) +
labs(x = 'Reported correct\nmodel', y = '% of process properties\nthat were\nnormatively aligned') +
theme_black()
sum(df.demo.filt$pct.features.norm == 1)
test = df.demo.filt %>% group_by(chose.correct.model) %>%
summarize(pct.features.norm.m = mean(pct.features.norm == 1),
pct.features.norm.se = se.prop(pct.features.norm == 1),
pct.features.norm.reported.m = mean(pct.features.norm.reported),
pct.features.norm.reported.se = se(pct.features.norm.reported),)
ggplot(test, aes(x = chose.correct.model, y = pct.features.norm.m)) +
geom_point(size = 5, color = 'white') +
geom_errorbar(aes(ymin = pct.features.norm.m - pct.features.norm.se,
ymax = pct.features.norm.m + pct.features.norm.se),
width = .2, color = 'white') +
scale_x_discrete(labels = c('No', 'Yes')) +
labs(x = 'Reported correct\nmodel', y = '% of process properties\nthat were\nnormatively aligned') +
theme_black()
ggplot(test, aes(x = chose.correct.model, y = pct.features.norm.m)) +
geom_point(size = 5, color = 'white') +
geom_errorbar(aes(ymin = pct.features.norm.m - pct.features.norm.se,
ymax = pct.features.norm.m + pct.features.norm.se),
width = .2, color = 'white') +
scale_x_discrete(labels = c('No', 'Yes')) +
labs(x = 'Reported correct\nmodel', y = '% normatively aligned') +
theme_black()
summary(lm(pct.features.norm.perf ~ accuracy.best.best + best.model.fac + best.model.ll.magnitude,
data = df.demo.filt %>% mutate(pct.features.norm.perf = pct.features.norm == 1)))
save.image('analysis.rdata')
rm(list=ls())
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
require(RColorBrewer)
require(dplyr)
require(tidyr)
require(forcats)
require(jsonlite)
require(lubridate)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = base_size, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
get.ci = function(x) {return(c(mean(x,na.rm = T) - 1.96*se(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se(x)))}
get.ci.prop = function(x) {return(c(mean(x,na.rm = T) - 1.96*se.prop(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se.prop(x)))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(gsub('\\[|\\]','',x),',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v4_movies/real1/analysis.rdata")
choice_dom
# others
ggplot(df.demo.filt, aes(x = choice_domain, y = accuracy.best.best)) +
geom_point() +
geom_smooth(method='lm')
test = df.demo.filt %>% group_by(chose.correct.model) %>%
summarize(pct.features.norm.m = mean(pct.features.norm==1),
pct.features.norm.se = se.prop(pct.features.norm==1),
pct.features.norm.reported.m = mean(pct.features.norm.reported),
pct.features.norm.reported.se = se(pct.features.norm.reported),)
ggplot(test, aes(x = chose.correct.model, y = pct.features.norm.m)) +
geom_point(size = 5, color = 'white') +
geom_errorbar(aes(ymin = pct.features.norm.m - pct.features.norm.se,
ymax = pct.features.norm.m + pct.features.norm.se),
width = .2, color = 'white') +
scale_x_discrete(labels = c('No', 'Yes')) +
labs(x = 'Reported correct\nmodel', y = '% normatively aligned') +
theme_black()
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
require(RColorBrewer)
require(dplyr)
require(tidyr)
require(forcats)
require(jsonlite)
require(lubridate)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
get.ci = function(x) {return(c(mean(x,na.rm = T) - 1.96*se(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se(x)))}
get.ci.prop = function(x) {return(c(mean(x,na.rm = T) - 1.96*se.prop(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se.prop(x)))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(gsub('\\[|\\]','',x),',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
test = df.demo.filt %>% group_by(chose.correct.model) %>%
summarize(pct.features.norm.m = mean(pct.features.norm==1),
pct.features.norm.se = se.prop(pct.features.norm==1),
pct.features.norm.reported.m = mean(pct.features.norm.reported),
pct.features.norm.reported.se = se(pct.features.norm.reported),)
ggplot(test, aes(x = chose.correct.model, y = pct.features.norm.m)) +
geom_point(size = 5, color = 'white') +
geom_errorbar(aes(ymin = pct.features.norm.m - pct.features.norm.se,
ymax = pct.features.norm.m + pct.features.norm.se),
width = .2, color = 'white') +
scale_x_discrete(labels = c('No', 'Yes')) +
labs(x = 'Reported correct\nmodel', y = '% normatively aligned') +
theme_black()
# by model
models.graph = df.demo.filt %>% group_by(best.model.fac) %>%
summarize(chose.correct.model.m = mean(chose.correct.model),
chose.correct.model.se = se.prop(chose.correct.model),
accuracy.best.best.m = mean(accuracy.best.best),
accuracy.best.best.se = se(accuracy.best.best))
ggplot(models.graph, aes(x = best.model.fac, y = chose.correct.model.m)) +
geom_col(position = 'dodge') +
geom_errorbar(aes(ymin = chose.correct.model.m - chose.correct.model.se,
ymax = chose.correct.model.m + chose.correct.model.se),
position = position_dodge(width = .9),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Correct model', y = '% of participants who\nreported correct model') +
geom_hline(aes(yintercept = 1/6), color = 'white', linetype = 'dashed')
getwd()
rm(list=ls())
