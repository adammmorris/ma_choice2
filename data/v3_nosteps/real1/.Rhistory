df.temp = bind_cols(df.temp.wad, df.temp.wp, df.temp.ew, df.temp.tal, df.temp.lex, df.temp.lexb)
for (i in 1:nrow(df.demo)) {
df.demo$inv.temp[i] = df.temp[i,df.demo$best.model.num[i]]
}
## get avg option diffs
df.optiondiffs = read.csv('option_diffs.csv', header = F)
df.demo$option.diff.avg = df.optiondiffs$V1
df.demo$option.diff.choiceprob = df.optiondiffs$V2
df.demo$option.diff.sd = df.optiondiffs$V3
df.browser = read.csv('browser_events.csv', stringsAsFactors = F)
# Import modeling results -------------------------------------------------
version = '';
## get cross-validation results
# ll version
df.cv.norm = read.csv(paste0('cv_results_normalized',version,'.csv'), header = F)
colnames(df.cv.norm) = models
df.cv.norm$subject.num = df.demo$subject.num
for (i in 1:nrow(df.demo)) {
df.demo$best.model.nums[i] = list(which(df.cv.norm[i,1:length(models)] == max(df.cv.norm[i,1:length(models)], na.rm = T)))
df.demo$multiple.bests[i] = length(df.demo$best.model.nums[i][[1]]) > 1
df.demo$best.model.num[i] = max(df.demo$best.model.nums[i][[1]])
df.attributes$best.model.num[df.attributes$subject == df.demo$subject[i]] = df.demo$best.model.num[i]
df.demo$chosen.model.ll[i] = df.cv.norm[i,df.demo$chosen.model.num[i]]
df.demo$chosen.model.rank[i] = rank(-df.cv.norm[i,1:length(models)])[df.demo$chosen.model.num[i]]
df.demo$chose.correct.model[i] = df.demo$chosen.model.num[i] %in% df.demo$best.model.nums[i][[1]]
}
df.demo = df.demo %>%
mutate(best.model = models[best.model.num],
best.model.fac = factor(best.model, models.order, models.order),
one.att.real = factor(models.one.att[best.model.num], one.att.levels),
bin.wts.real = factor(models.bin.wts[best.model.num], bin.wts.levels),
bin.atts.real = factor(models.bin.atts[best.model.num], bin.atts.levels))
# get likelihoods of best model
df.cv.best = read.csv(paste0('cv_results_best',version,'.csv'), header = F)
df.demo$best.model.ll.magnitude = df.cv.best$V3
df.demo$below.chance = df.cv.best$V2
# get non-normalized version
df.cv = read.csv(paste0('cv_results',version,'.csv'), header = F)
colnames(df.cv) = models
df.cv$subject.num = df.demo$subject.num
df.cv$subject = df.demo$subject
df.demo$avg.model.ll = rowMeans(df.cv[,1:length(models)])
df.demo$var.model.ll = apply(df.cv[,1:length(models)], 1, var)
df.demo$sd.model.ll = sqrt(df.demo$var.model.ll)
# rounded version
df.cv.rnd = read.csv(paste0('cv_results_rounded',version,'.csv'), header = F)
colnames(df.cv.rnd) = models
for (i in 1:nrow(df.demo)) {
df.demo$best.model.nums.rnd[i] = list(which(df.cv.rnd[i,1:length(models)] == max(df.cv.rnd[i,1:length(models)], na.rm = T)))
df.demo$multiple.bests.rnd[i] = length(df.demo$best.model.nums.rnd[i][[1]]) > 1
df.demo$best.model.num.rnd[i] = max(df.demo$best.model.nums.rnd[i][[1]])
df.attributes$best.model.num.rnd[df.attributes$subject == df.demo$subject[i]] = df.demo$best.model.num.rnd[i]
df.demo$chosen.model.rnd[i] = df.cv.rnd[i,df.demo$chosen.model.num[i]]
df.demo$best.model.rnd.magnitude[i] = df.cv.rnd[i,df.demo$best.model.num.rnd[i]]
df.demo$best.model.rnd.magnitude2[i] = df.cv.rnd[i,df.demo$best.model.num[i]]
df.demo$chosen.model.rank.rnd[i] = rank(-df.cv.rnd[i,1:length(models)])[df.demo$chosen.model.num[i]]
df.demo$chose.correct.model.rnd[i] = df.demo$chosen.model.num[i] %in% df.demo$best.model.nums.rnd[i][[1]]
df.demo$model.fits.agree[i] = df.demo$best.model.num[i] %in% df.demo$best.model.nums.rnd[i][[1]]
}
df.demo = df.demo %>%
mutate(best.model.rnd = models[best.model.num.rnd],
best.model.fac.rnd = factor(best.model.rnd, models.order, models.order))
df.demo$avg.model.rnd = rowMeans(df.cv.rnd[,1:length(models)])
df.demo$var.model.rnd = apply(df.cv.rnd[,1:length(models)], 1, var)
## get weights
df.fitted.wad = read.csv('fitted_empirical_weights_WAD.csv', header = F)
df.fitted.wp = read.csv('fitted_empirical_weights_WP.csv', header = F)
df.fitted.ew = read.csv('fitted_empirical_weights_EW.csv', header = F)
df.fitted.tal = read.csv('fitted_empirical_weights_TAL.csv', header = F)
df.fitted.lex.raw = read.csv('fitted_empirical_weights_LEX.csv', header = F)
df.fitted.lexb.raw = read.csv('fitted_empirical_weights_LEXB.csv', header = F)
colnames(df.fitted.wad) = atts
colnames(df.fitted.wp) = atts
colnames(df.fitted.ew) = atts
colnames(df.fitted.tal) = atts
df.fitted.lex = df.fitted.wad
for (i in 1:nrow(df.fitted.lex)) {
for (att in 1:length(atts)) {
if (df.fitted.lex.raw$V1[i] == att) {
df.fitted.lex[i,att] = ifelse(df.fitted.lex.raw$V2[i] == 1, 1, -1)
} else {
df.fitted.lex[i,att] = 0
}
}
}
df.fitted.lexb = df.fitted.wad
for (i in 1:nrow(df.fitted.lexb)) {
for (att in 1:length(atts)) {
if (df.fitted.lexb.raw$V1[i] == att) {
df.fitted.lexb[i,att] = ifelse(df.fitted.lexb.raw$V2[i] == 1, 1, -1)
} else {
df.fitted.lexb[i,att] = 0
}
}
}
fitted.weights = list(df.fitted.wad, df.fitted.wp, df.fitted.ew, df.fitted.tal, df.fitted.lex, df.fitted.lexb)
for (i in 1:nrow(df.attributes)) {
df.attributes$fitted.weight[i] = fitted.weights[[df.attributes$chosen.model.num[i]]][df.attributes$subject.num[i],df.attributes$attribute[i]]
df.attributes$fitted.weight.best[i] = fitted.weights[[df.attributes$best.model.num[i]]][df.attributes$subject.num[i],df.attributes$attribute[i]]
df.attributes$fitted.weight.wad[i] = fitted.weights[[1]][df.attributes$subject.num[i],df.attributes$attribute[i]]
df.attributes$fitted.weight.wp[i] = fitted.weights[[2]][df.attributes$subject.num[i],df.attributes$attribute[i]]
df.attributes$fitted.weight.ew[i] = fitted.weights[[3]][df.attributes$subject.num[i],df.attributes$attribute[i]]
df.attributes$fitted.weight.tal[i] = fitted.weights[[4]][df.attributes$subject.num[i],df.attributes$attribute[i]]
df.attributes$fitted.weight.lex[i] = fitted.weights[[5]][df.attributes$subject.num[i],df.attributes$attribute[i]]
df.attributes$fitted.weight.lexb[i] = fitted.weights[[6]][df.attributes$subject.num[i],df.attributes$attribute[i]]
}
df.attributes = df.attributes %>%
mutate(fitted.weight.abs = abs(fitted.weight),
fitted.weight.best.abs = abs(fitted.weight.best),
fitted.weight.wad.abs = abs(fitted.weight.wad),
error = fitted.weight - rating.signed,
error.sq = error ^ 2,
error.abs = fitted.weight.abs - rating,
error.abs.sq = error.abs ^ 2,
error.followup = fitted.weight.wad - rating.followup.signed,
error.followup.sq = error.followup ^ 2,
error.followup.abs = fitted.weight.wad.abs - rating.followup,
error.followup.abs.sq = error.followup.abs ^ 2,
error.best = fitted.weight.best - rating.signed,
error.best.sq = error.best ^ 2,
error.best.abs = fitted.weight.best.abs - rating,
error.best.abs.sq = error.best.abs ^ 2,
error.followup.best = fitted.weight.best - rating.followup.signed,
error.followup.best.sq = error.followup.best ^ 2,
error.followup.best.abs = fitted.weight.best.abs - rating.followup,
error.followup.best.abs.sq = error.followup.best.abs ^ 2)
# get normalized per-subject fitted weights and ratings
subjects = unique(df.attributes$subject.num)
for (i in subjects) {
cur.rows = df.attributes$subject.num == i
df.attributes$rating.signed.scaled[cur.rows] = scale(df.attributes$rating.signed[cur.rows])
df.attributes$fitted.weight.scaled[cur.rows] = scale(df.attributes$fitted.weight[cur.rows])
#df.s2$fitted.weight.lm.scaled[cur.rows] = scale(df.s2$fitted.weight.lm[cur.rows])
}
# get subject-level accuracies
df.attributes.subj = df.attributes %>% group_by(subject) %>%
summarize(num_same = sum(same & (rating > 10)),
accuracy = cor(fitted.weight, rating.signed, method = 'kendall'),
accuracy.abs = cor(fitted.weight.abs, rating, method = 'kendall'),
accuracy.followup = cor(fitted.weight.wad, rating.followup.signed, method = 'kendall'),
accuracy.followup.abs = cor(fitted.weight.wad.abs, rating.followup, method = 'kendall'),
accuracy.scaled = cor(fitted.weight.scaled, rating.signed.scaled, method = 'kendall'),
accuracy.best = cor(fitted.weight.best, rating.signed, method = 'kendall'),
accuracy.followup.best = cor(fitted.weight.best, rating.followup.signed, method = 'kendall'),
mse = mean(error.sq),
mse.abs = mean(error.abs.sq),
mse.followup = mean(error.followup.sq),
mse.followup.abs = mean(error.followup.abs.sq),
mse.best = mean(error.best.sq),
mse.best.abs = mean(error.best.abs.sq),
mse.followup.best = mean(error.followup.best.sq),
mse.followup.best.abs = mean(error.followup.best.abs.sq))
for (i in 1:nrow(df.demo)) {
att.row = df.attributes.subj$subject == df.demo$subject[i]
df.demo$accuracy[i] = df.attributes.subj$accuracy[att.row]
df.demo$accuracy.abs[i] = df.attributes.subj$accuracy.abs[att.row]
df.demo$accuracy.followup[i] = df.attributes.subj$accuracy.followup[att.row]
df.demo$accuracy.followup.abs[i] = df.attributes.subj$accuracy.followup.abs[att.row]
df.demo$accuracy.scaled[i] = df.attributes.subj$accuracy.scaled[att.row]
df.demo$accuracy.best[i] = df.attributes.subj$accuracy.best[att.row]
df.demo$accuracy.followup.best[i] = df.attributes.subj$accuracy.followup.best[att.row]
df.demo$mse[i] = df.attributes.subj$mse[att.row]
df.demo$mse.abs[i] = df.attributes.subj$mse.abs[att.row]
df.demo$mse.followup[i] = df.attributes.subj$mse.followup[att.row]
df.demo$mse.followup.abs[i] = df.attributes.subj$mse.followup.abs[att.row]
df.demo$mse.best[i] = df.attributes.subj$mse.best[att.row]
df.demo$mse.best.abs[i] = df.attributes.subj$mse.best.abs[att.row]
df.demo$mse.followup.best[i] = df.attributes.subj$mse.followup.best[att.row]
df.demo$mse.followup.best.abs[i] = df.attributes.subj$mse.followup.best.abs[att.row]
}
## get inv temps
df.temp.wad = read.csv('fitted_empirical_temps_WAD.csv', header = F)
df.temp.wp = read.csv('fitted_empirical_temps_WP.csv', header = F)
df.temp.ew = read.csv('fitted_empirical_temps_EW.csv', header = F)
df.temp.tal = read.csv('fitted_empirical_temps_TAL.csv', header = F)
df.temp.lex = read.csv('fitted_empirical_temps_LEX.csv', header = F)
df.temp.lexb = read.csv('fitted_empirical_temps_LEXB.csv', header = F)
df.temp = bind_cols(df.temp.wad, df.temp.wp, df.temp.ew, df.temp.tal, df.temp.lex, df.temp.lexb)
for (i in 1:nrow(df.demo)) {
df.demo$inv.temp[i] = df.temp[i,df.demo$best.model.num[i]]
}
## get avg option diffs
df.optiondiffs = read.csv('option_diffs.csv', header = F)
df.demo$option.diff.avg = df.optiondiffs$V1
df.demo$option.diff.choiceprob = df.optiondiffs$V2
df.demo$option.diff.sd = df.optiondiffs$V3
# these are my weird attempts at doing split-half reliability estimates
# df.s2.subj.split = df.s2 %>% mutate(trial_half = factor(trial %in% combs[,i], c(F,T), c('First Half', 'Second Half'))) %>%
#   group_by(subject, trial_half) %>%
#   summarize(accuracy = cor(fitted.weight.abs, rating))
# combs = combn(1:18,9)
# df.s2.grouped = df.s2 %>% group_by(subject)
# shr = numeric(ncol(combs))
# for (i in 1:ncol(combs)) {
#   acc1 = (df.s2.grouped %>% filter(trial %in% combs[,i]) %>% summarize(accuracy = cor(fitted.weight.abs, rating)))$accuracy
#   acc2 = (df.s2.grouped %>% filter(!(trial %in% combs[,i])) %>% summarize(accuracy = cor(fitted.weight.abs, rating)))$accuracy
#   shr[i] = cor(acc1, acc2)
# }
# Browser events ----------------------------------------------------------
df.browser = read.csv('browser_events.csv', stringsAsFactors = F)
df.browser.subj = df.browser %>%
filter(browser_event == 'blur') %>%
group_by(subject) %>%
summarize(num.blur = n())
# Do filtering ---------------------------------------------------------
exclude.subj = c()
for (subj in subjlist) {
demo.row = df.demo$subject == subj
s1.subj = df.s1.subj$subject == subj
browser.row = df.browser.subj$subject == subj
if (subj %in% exclude.subj.ant |
df.demo$instruction_times_median[demo.row] < 2 |
(!is.na(df.demo$instruction_times_followup_median[demo.row]) && df.demo$instruction_times_followup_median[demo.row] < 2) |
df.s1.subj$pct_left[s1.subj] > .8 |
df.s1.subj$pct_left[s1.subj] < .2 |
df.s1.subj$num_trials != 75 |
df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0 |
df.demo$attention[demo.row] < .5 |
df.demo$below.chance[demo.row] |
(any(browser.row) && df.browser.subj$num.blur[df.browser.subj$subject == subj] > 20)) {
exclude.subj = c(exclude.subj, subj)
}
}
df.demo.filt = df.demo %>% filter(!(subject %in% exclude.subj))
df.s1.filt = df.s1 %>% filter(!(subject %in% exclude.subj))
df.s2.filt = df.s2 %>% filter(!(subject %in% exclude.subj))
df.attributes.filt = df.attributes %>% filter(!(subject %in% exclude.subj))
df.attributes.subj.filt = df.attributes.subj %>% filter(!(subject %in% exclude.subj))
df.cv.filt = df.cv %>% filter(!(subject %in% exclude.subj))
df.demo.heat = df.demo %>% group_by(chosen.model.fac, best.model.fac) %>%
summarize(num.subj = n()) %>%
group_by(best.model.fac) %>%
mutate(num.subj.norm = num.subj / sum(num.subj))
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj.norm)) +
geom_tile() +
labs(y = '\n% self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\n% self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\n% self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
## check out model fits
# which models were the best fits?
ggplot(df.demo.filt, aes(x = best.model.fac)) +
geom_bar(position = 'dodge', color = 'white') +
theme_black() +
labs(x = '\nBest-fitting model', y = '# of subjects')
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\n% self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj.norm)) +
geom_tile() +
labs(y = '\n% self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\n% self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj.norm)) +
geom_tile() +
labs(y = '\n% self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj.norm)) +
geom_tile() +
labs(y = '\n# self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj)) +
geom_tile() +
labs(y = '\n# self-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
test = read.csv('normed75.csv', header = F)
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', y = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
test = read.csv('normed_100.csv', header = F)
rownames(test) = models.order
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '# of subjects')) +
theme_black()
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
test = read.csv('normed_75.csv', header = F)
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
test = read.csv('normed_150.csv', header = F)
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(0 = 'black', 100 = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
test = read.csv('normed_100.csv', header = F)
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
test = read.csv('normed_75.csv', header = F)
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj.norm)) +
geom_tile() +
labs(y = '\nSelf-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
ggplot(df.demo.heat, aes(x = best.model.fac, y = chosen.model.fac,
fill = num.subj.norm)) +
geom_tile() +
geom_text(aes(label = round(num.subj.norm, 2))) +
labs(y = '\nSelf-reported model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
test = read.csv('normed_75.csv', header = F)
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2))) +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
test = read.csv('normed_100.csv', header = F)
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2))) +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
test = read.csv('normed_150.csv', header = F)
rownames(test) = models.order
colnames(test) = models.order
test$true = rownames(test)
test.long = test %>% pivot_longer(!true, 'fitted') %>%
mutate(true = factor(true, models, models.order),
fitted = factor(fitted, models, models.order))
ggplot(test.long, aes(x = fitted, y = true,
fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2))) +
labs(y = '\nTrue model', x = 'Best-fitting model') +
#scale_fill_brewer(palette = 'YlOrRd') +
scale_fill_continuous(limits = c(0,1), low = 'black', high = 'white') +
guides(fill = guide_colorbar(title = '% of subjects')) +
theme_black()
## check out model fits
# which models were the best fits?
ggplot(df.demo.filt, aes(x = best.model.fac)) +
geom_bar(position = 'dodge', color = 'white') +
theme_black() +
labs(x = '\nBest-fitting model', y = '# of subjects')
## check out model fits
# which models were the best fits?
ggplot(df.demo.filt, aes(x = best.model.fac)) +
geom_bar(position = 'dodge', color = 'white') +
theme_black() +
labs(x = '\nBest-fitting model', y = '# of subjects')
rm(list=ls())
