ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb)) +
geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 6, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 7, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 20, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 7) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb - 20, label = "100% of options evaluated\nvia model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 1.4, y = mb + 2, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 3, y = mb + 2, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2.3, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6) +
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
2 / 1000
c(2,5,10,20,40,80) / 1000
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '..5%', '1%', '2%', '4%', '8%'), c('.2%', '..5%', '1%', '2%', '4%', '8%')))
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '..5%', '1%', '2%', '4%', '8%'), c('.2%', '..5%', '1%', '2%', '4%', '8%')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
#geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
rcs = c(4.7122,       8.4266,       12.732,       18.778,       27.449,       37.754)
cs = c(67.124,       83.346,       94.945,       100.91,       105.95,        109.6)
mb = 113.97
mf = 52.778
df = data.frame(output = c(rcs, cs), type = c(rep('Non-adaptive sampling', 6), rep('Adaptive sampling', 6)),
k = factor(c('.2%', '.5%', '1%', '2%', '4%', '8%'), c('.2%', '.5%', '1%', '2%', '4%', '8%')))
df$type = factor(df$type, c('Non-adaptive sampling', 'Adaptive sampling'))
ggplot(data = df %>% filter(type == 'Adaptive sampling'), aes(x = k, y = output)) +
geom_col(position = 'dodge') +
xlab('Computational cost\n(% of possible options evaluated via model-based planning)') + ylab('Expected value (EV) of choice') +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text = element_text(size = 18), axis.title = element_text(size = 22), legend.text = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position = "bottom") +
guides(fill=guide_legend(title = '')) +
geom_hline(aes(yintercept = mb), linetype = 'dashed') +
#geom_hline(aes(yintercept = mf), linetype = 'dashed') +
annotate("text", x = 2, y = mb + 5, label = "100% of options evaluated via model-based planning", fontface = 2, size = 6)
#annotate("text", x = 1, y = mf + 23, label = "No options", fontface = 2, size = 7) +
#geom_segment(aes(x = .85, xend = .85, y = mf + 18, yend = mf + 3), size = .5, arrow = arrow(length = unit(".5", "cm")))
load("~/Me/Psychology/Projects/choicesets/git/data/choice-set/months_confounded/real1/analysis.rdata")
df.logit
# for selection tests, we need logit
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo.filt)) {
subj.name = df.demo$subject[subj]
recalled.temp = df.words.filt$in.cs[df.words.filt$subject == subj.name]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words.filt %>% filter(subject == subj.name)
df.s2.temp = df.s2.filt %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
Condition.col = rep(df.s2.temp$cond, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$s1_value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_s1value[recalled.temp], nAnswered)
MBval.col = rep(df.words.temp$s2_value[recalled.temp], nAnswered)
MBhigh.col = rep(df.words.temp$high_s2value[recalled.temp], nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
ind = ind + 1
}
}
Choice.col = as.vector(t(temp.choice))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col))
}
}
df.logit = df.logit %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
View(df.logit)
rm(list=ls())
library(mlogit)
library(nnet)
library(ggstatsplot)
methods(nobs)
load("/Users/adam/Me/Psychology/Projects/choicesets/git/data/choice-set/months_confounded_loss/real1/analysis.rdata")
summary(m.cs.s1)
load("~/Me/Psychology/Projects/choicesets/git2/experiments/food/1/analysis.RData")
## raw data
p = ggplot(data = df2.filt %>% mutate(chosen = ifelse(chosen == T, T, NA)), aes(x = val, y = val.spec, color = chosen, group = chosen)) +
geom_jitter(size = 2) +
geom_vline(xintercept = 4) +
geom_hline(yintercept = 4) +
labs(x = '', y = '') +
guides(color = F)
require(dplyr)
require(ggplot2)
require(ggExtra)
require(tidyr)
require(lme4)
require(lmerTest)
require(mlogit)
require(rje)
## raw data
p = ggplot(data = df2.filt %>% mutate(chosen = ifelse(chosen == T, T, NA)), aes(x = val, y = val.spec, color = chosen, group = chosen)) +
geom_jitter(size = 2) +
geom_vline(xintercept = 4) +
geom_hline(yintercept = 4) +
labs(x = '', y = '') +
guides(color = F)
ggMarginal(p, type='histogram', xparams = list(bins=8), yparams = list(bins = 8))
mean(df2.filt$val > 4)
mean(df2.filt$val >= 4)
mean(df2.filt$val < 4)
mean(df2.filt$val.spec > 4)
mean(df2.filt$val.spec < 4)
mean(df2.filt$val[df2.filt$choice] < 4)
View(df2.filt)
mean(df2.filt$val[df2.filt$chosen] < 4)
mean(df2.filt$val[df2.filt$chosen == 1] < 4)
mean(df2.filt$val[df2.filt$chosen == 1] > 4)
mean(df2.filt$val.spec[df2.filt$chosen == 1] > 4)
mean(df2.filt$val.spec[df2.filt$chosen == 1] < 4)
library(groundhog)
pkgs = c('dplyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist')
groundhog.library(pkgs, '2020-03-01')
library(groundhog)
pkgs = c('dplyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist')
groundhog.library(pkgs, '2020-03-01')
groundhog.library(pkgs, '2020-04-25')
R_DEFAULT_PACKAGES
?RProfile
library(groundhog)
pkgs = c('dplyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist')
groundhog.library(pkgs, '2020-03-01')
rm(list=ls())
test
1
Version()
R.Version()
library(groundhog)
pkgs = c('dplyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist')
groundhog.library(pkgs, '2020-03-01')
devtools::install_github("DejanDraschkow/mixedpower")
require(devtools)
install.packages('devtools')
require(devtools)
devtools::install_github("DejanDraschkow/mixedpower")
hist(df.demo$total_time_real)
# Setup -------------------------------------------------------------------
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = base_size, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(x,',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load data ---------------------------------------------------------------
df.demo.raw = read.csv('demo.csv', stringsAsFactors = F) %>% arrange(subject) %>% mutate(total_time_real = total_time / 60000)
df.s1.raw = read.csv('s1.csv', stringsAsFactors = F) %>% arrange(subject)
df.s2.raw = read.csv('s2.csv', stringsAsFactors = F) %>% arrange(subject)
# Do filtering ---------------------------------------------------------
df.demo = df.demo.raw %>% mutate(subject = factor(subject), subject.num = as.numeric(subject))
df.s1 = df.s1.raw %>% filter(practice == 0) %>% mutate(subject = factor(subject), subject.num = as.numeric(subject))
df.s2 = df.s2.raw %>% mutate(subject = factor(subject), subject.num = as.numeric(subject))
# Clean data --------------------------------------------------------------
ds.reversed = 6:10
mindfulness.reversed = c(3,4,7,8,9,13)
sk.reversed = c(4,5,6,7,8,9,10,11,12)
df.demo$decisionstyle = numeric(nrow(df.demo))
df.demo$mindfulness = numeric(nrow(df.demo))
df.demo$sk = numeric(nrow(df.demo))
for (i in 1:nrow(df.demo)) {
ds = as.numeric.vector(df.demo$decisionstyle_responses[i])
ds[ds.reversed] = 100 - ds[ds.reversed]
df.demo$decisionstyle[i] = mean(ds)
mindfulness = as.numeric.vector(df.demo$mindfulness_responses[i])
mindfulness[mindfulness.reversed] = 100 - mindfulness[mindfulness.reversed]
df.demo$mindfulness[i] = mean(mindfulness)
sk = as.numeric.vector(df.demo$selfknowledge_responses[i])
sk[sk.reversed] = 100 - sk[sk.reversed]
df.demo$sk[i] = mean(sk)
}
df.demo = df.demo %>%
mutate(choice.domain.fac = factor(choice_domain > median(choice_domain), c(F,T), c('Low', 'High')),
decisionstyle.fac = factor(decisionstyle > median(decisionstyle), c(F,T), c('Low', 'High')),
mindfulness.fac = factor(mindfulness > median(mindfulness), c(F,T), c('Low', 'High')),
sk.fac = factor(sk > median(sk), c(F,T), c('Low', 'High')))
df.s1$choice.domain = numeric(nrow(df.s1))
df.s1$decisionstyle = numeric(nrow(df.s1))
df.s1$mindfulness = numeric(nrow(df.s1))
df.s1$sk = numeric(nrow(df.s1))
for (i in 1:nrow(df.s1)) {
demo.row = as.character(df.demo$subject) == as.character(df.s1$subject[i])
if (any(demo.row)) {
df.s1$choice.domain[i] = df.demo$choice_domain[demo.row]
df.s1$decisionstyle[i] = df.demo$decisionstyle[demo.row]
df.s1$mindfulness[i] = df.demo$mindfulness[demo.row]
df.s1$sk[i] = df.demo$sk[demo.row]
} else {
df.s1$choice.domain[i] = NA
df.s1$decisionstyle[i] = NA
df.s1$mindfulness[i] = NA
df.s1$sk[i] = NA
}
}
df.s1 = df.s1 %>%
mutate(choice.domain.fac = factor(choice.domain > median(choice.domain, na.rm = T), c(F,T), c('Low', 'High')),
decisionstyle.fac = factor(decisionstyle > median(decisionstyle, na.rm = T), c(F,T), c('Low', 'High')),
mindfulness.fac = factor(mindfulness > median(mindfulness, na.rm = T), c(F,T), c('Low', 'High')),
sk.fac = factor(sk > median(sk,na.rm = T), c(F,T), c('Low', 'High')))
df.s2$choice.domain = numeric(nrow(df.s2))
df.s2$decisionstyle = numeric(nrow(df.s2))
df.s2$mindfulness = numeric(nrow(df.s2))
df.s2$sk = numeric(nrow(df.s2))
for (i in 1:nrow(df.s2)) {
demo.row = as.character(df.demo$subject) == as.character(df.s2$subject[i])
if (any(demo.row)) {
df.s2$choice.domain[i] = df.demo$choice_domain[demo.row]
df.s2$decisionstyle[i] = df.demo$decisionstyle[demo.row]
df.s2$mindfulness[i] = df.demo$mindfulness[demo.row]
df.s2$sk[i] = df.demo$sk[demo.row]
} else {
df.s2$choice.domain[i] = NA
df.s2$decisionstyle[i] = NA
df.s2$mindfulness[i] = NA
df.s2$sk[i] = NA
}
}
df.s2 = df.s2 %>%
mutate(choice.domain.fac = factor(choice.domain > median(choice.domain, na.rm = T), c(F,T), c('Low', 'High')),
decisionstyle.fac = factor(decisionstyle > median(decisionstyle, na.rm = T), c(F,T), c('Low', 'High')),
mindfulness.fac = factor(mindfulness > median(mindfulness, na.rm = T), c(F,T), c('Low', 'High')),
sk.fac = factor(sk > median(sk,na.rm = T), c(F,T), c('Low', 'High')))
## Stage 1 choices
atts = c('Number of Bedrooms','Size of Garage','Amount of Crime in Neighborhood','Proximity to Parks','Proximity to Waterfront/Beaches',
'Proximity to Cafes/Restaurants','Noise Pollution','Reputation of Closest School','Amount of Natural Light','Age of Building','Washer/Dryer','Size of Yard','Fireplace',
'Central AC','Climate of Area','Hardwood Floors','Freshly Painted Exterior','Size of Home')
att.nums = 1:length(atts)
att.nums.str = as.character(att.nums)
atts.opt1 = paste0(atts,'.opt1')
atts.opt2 = paste0(atts,'.opt2')
atts.opt1.enclosed = paste0('`',atts.opt1,'`')
atts.opt2.enclosed = paste0('`',atts.opt2,'`')
atts.opt.diff = paste0(atts,'.diff')
atts.opt.diff.enclosed = paste0('`',atts.opt.diff,'`')
#df.s1.modeling = df.s1
df.s1[,atts.opt1] = NA
df.s1[,atts.opt2] = NA
#df.s1.modeling[,att.nums.str] = NA
df.avail.atts = data.frame(matrix(0,nrow = nrow(df.s1), ncol = length(atts)+1))
colnames(df.avail.atts) = c('subject.num', atts.opt1)
df.avail.atts$subject.num = df.s1$subject.num
for (i in 1:nrow(df.s1)) {
cur.atts = as.string.vector(df.s1$attributes[i])
cur.opt1.vals = as.string.vector(df.s1$opt1_values[i])
cur.opt2.vals = as.string.vector(df.s1$opt2_values[i])
cur.att.nums = numeric(length(cur.atts))
for (j in 1:length(cur.atts)) {
cur.att.nums[j] = which(cur.atts[j] == atts)
df.s1[i,atts.opt1[cur.att.nums[j]]] = cur.opt1.vals[j]
df.s1[i,atts.opt2[cur.att.nums[j]]] = cur.opt2.vals[j]
df.avail.atts[i,atts.opt1[cur.att.nums[j]]] = 1
}
df.s1$att.nums[i] = as.string(cur.att.nums)
}
# clean up data
scale1 = c('None', 'Small', 'Medium', 'Large')
scale2 = c('Very Low', 'Low', 'Moderate', 'High', 'Very High')
scale3 = c('Very Bad', 'Bad', 'Moderate', 'Good', 'Very Good')
scale4 = c('Old', 'Medium', 'New')
scale5 = c('No', 'Yes')
scale6 = c('No natural light', 'A little natural light', 'Moderate natural light', 'A lot of natural light')
scale7 = c('Low', 'Medium', 'High')
for (i in 1:length(atts)) {
cur.att.opt1 = paste0(atts[i],'.opt1')
cur.att.opt2 = paste0(atts[i],'.opt2')
if (atts[i] %in% c('Number of Bedrooms')) {
df.s1[,cur.att.opt1] = as.numeric(df.s1[,cur.att.opt1])
df.s1[,cur.att.opt2] = as.numeric(df.s1[,cur.att.opt2])
} else if (atts[i] %in% c('Size of Home', 'Proximity to Parks', 'Proximity to Waterfront/Beaches', 'Proximity to Cafes/Restaurants')) {
df.s1[,cur.att.opt1] = as.numeric(sub('\\ .*', '', df.s1[,cur.att.opt1]))
df.s1[,cur.att.opt2] = as.numeric(sub('\\ .*', '', df.s1[,cur.att.opt2]))
} else if (atts[i] %in% c('Amount of Crime in Neighborhood')) {
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], scale2))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], scale2))
} else if (atts[i] %in% c('Central AC', 'Fireplace', 'Hardwood Floors', 'Freshly Painted Exterior', 'Washer/Dryer')) {
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], scale5))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], scale5))
} else if (atts[i] %in% c('Size of Garage', 'Size of Yard')) {
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], scale1))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], scale1))
} else if (atts[i] %in% c('Age of Building')) {
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], scale4))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], scale4))
} else if (atts[i] %in% c('Amount of Natural Light')) {
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], scale6))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], scale6))
} else if (atts[i] %in% c('Reputation of Closest School', 'Climate of Area')) {
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], scale3))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], scale3))
} else if (atts[i] %in% c('Noise Pollution')) {
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], scale7))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], scale7))
}
}
# compute diffs
for (i in 1:length(atts)) {
df.s1[,paste0(atts[i], '.diff')] = df.s1[,atts.opt2[i]] - df.s1[,atts.opt1[i]]
}
# normalize attribute values
df.s1.scaled = df.s1
for (i in df.s1$subject.num) {
subj.rows = df.s1$subject.num == i
df.s1.scaled[subj.rows, c(atts.opt1, atts.opt2, atts.opt.diff)] = scale(df.s1[subj.rows, c(atts.opt1, atts.opt2, atts.opt.diff)])
}
df.s1.scaled.nonan = df.s1.scaled
for (i in 1:ncol(df.s1.scaled)) {
df.s1.scaled.nonan[is.na(df.s1.scaled.nonan[,i]),i] = 0
}
hist(df.s1.subj$total.time)
hist(df.demo$total_time_real)
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(total.time = sum(rt) / 60000)
hist(df.s1.subj$total.time)
hist(df.demo$total_time_real)
View(df.demo)
