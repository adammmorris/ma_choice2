require(combinat)
require(effectsize)
require(RColorBrewer)
standardize_parameters(m.acs1)
standardize_parameters(m.acs2)
load("/Users/adam/Me/Psychology/Projects/completed/choicesets/git2/experiments/food/study1_output.rdata")
# load packages with groundhog (http://groundhogr.com/)
# start a new R session before doing this!
# if you get this (or any other) error:
# "groundhog says: 11 of the 21 packages needed by 'dplyr_0.8.4' are currently loaded, but not with the version that is needed."
# then run "rm(list=ls())", restart your R session, and try again.
#  if you still get the error, then do all the following steps in order:
# switch to R version 4, restart your R session, run "library(groundhog); groundhog.library('dplyr', '2020-06-01')", restart your R session, run "library(groundhog); groundhog.library('dplyr', '2020-03-01')", switch back to R version 3, restart your R session, and try running this script again.
# (I think this is a bug in groundhogr, and I have no idea why this fixes it, but that's what worked for me.)
library(groundhog)
pkgs = c('dplyr', 'tidyr', 'ggplot2', 'ggExtra', 'lme4', 'lmerTest', 'mlogit', 'stringdist', 'rje')
groundhog.library(pkgs, '2020-03-01')
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v4_social/pilot2/analysis.rdata")
hist(df.s1$rt)
hist(df.s1$rt / 60000)
hist(df.s1$rt / 60000, breaks = 10)
hist(df.s1$rt / 60000, breaks = 20)
hist(df.s1$rt / 60000, breaks = 30)
hist(df.s1$rt / 60000, breaks = 40)
hist(df.s1$rt[df.s1$rt < 5*60000] / 60000, breaks = 40)
View(df.s1)
median(df.s1$rt)
hist(df.s1$rt[df.s1$rt < 5*1000] / 1000, breaks = 40)
hist(df.s1$rt[df.s1$rt < 5*1000] / 1000, breaks = 10)
hist(df.s1$rt[df.s1$rt < 10*1000] / 1000, breaks = 10)
hist(df.s1$rt[df.s1$rt < 15*1000] / 1000, breaks = 10)
hist(df.s1$rt[df.s1$rt < 20*1000] / 1000, breaks = 10)
hist(df.s1$rt[df.s1$rt < 30*1000] / 1000, breaks = 10)
hist(df.s1$rt[df.s1$rt < 30*1000] / 1000, breaks = 20)
hist(df.s1.filt$rt[df.s1.filt$rt < 30*1000] / 1000, breaks = 20)
median(df.s1.filt$rt)
hist(df.demo$total_time_real)
hist(df.demo$total_time_real / 60)
hist(df.demo$total_time_real)
hist(df.demo.filt$total_time_real)
hist(df.demo.filt$total_time_real[df.demo.filt$total_time_real < 150])
hist(df.demo.filt$total_time_real[df.demo.filt$total_time_real < 100])
median(df.demo.filt$total_time_real[df.demo.filt$total_time_real < 100])
rm(list=ls())
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v4/real1/analysis.rdata")
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
require(RColorBrewer)
require(dplyr)
require(tidyr)
require(forcats)
require(jsonlite)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = 12, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = 12, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = 18, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = 18, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = 20, color = "white"),
legend.title = element_text(size = 24, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
get.ci = function(x) {return(c(mean(x,na.rm = T) - 1.96*se(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se(x)))}
get.ci.prop = function(x) {return(c(mean(x,na.rm = T) - 1.96*se.prop(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se.prop(x)))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(gsub('\\[|\\]','',x),',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# which way did errors go?
df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(oneatt.correct = mean(oneatt.correct))
df.demo.filt %>% group_by(best.model.binwts) %>%
summarize(binwts.correct = mean(binwts.correct))
df.demo.filt %>% group_by(best.model.binatts) %>%
summarize(binatts.correct = mean(binatts.correct))
df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(chosen.oneatt = mean(chosen.oneatt))
df.demo.filt$chosen.oneatt
df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(pct.oneatt = mean(chosen.oneatt == 'One'),
pct.oneatt = mean(chosen.oneatt == 'Multiple'))
df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(pct.oneatt = mean(chosen.oneatt == 'One'),
pct.multiple = mean(chosen.oneatt == 'Multiple'))
df.demo.filt$chosen.binwts
df.demo.filt %>% group_by(best.model.binwts) %>%
summarize(pct.binwts1 = mean(chosen.binwts == 'Binary'),
pct.binwts2 = mean(chosen.binwts == 'Graded'))
df.demo.filt %>% group_by(best.model.binatts) %>%
summarize(pct.binatts1 = mean(chosen.binatts == 'Binary'),
pct.binatts2 = mean(chosen.binatts == 'Graded'))
df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(pct.oneatt = mean(chosen.oneatt == 'One'),
pct.multiple = mean(chosen.oneatt == 'Multiple'))
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(pct.oneatt = mean(chosen.oneatt == 'One'),
pct.multiple = mean(chosen.oneatt == 'Multiple'))
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(pct.oneatt = mean(chosen.oneatt == 'One'),
pct.multiple = mean(chosen.oneatt == 'Multiple'))
test
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(pct.oneatt = mean(chosen.oneatt == 'One'),
pct.multiple = mean(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt)
test
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(pct.oneatt = mean(chosen.oneatt == 'One'),
pct.multiple = mean(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt)
ggplot(test, aes(x = best.model.oneatt, y = name)) +
geom_point()
test
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, color = name)) +
geom_point()
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, color = name)) +
geom_bar(position = 'dodge')
# which way did errors go?
df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(oneatt.correct = mean(oneatt.correct))
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(pct.oneatt = mean(chosen.oneatt == 'One'),
pct.multiple = mean(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt)
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, color = name)) +
geom_bar(position = 'dodge')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_bar(position = 'dodge')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black()
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Actually used Q1')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% reporting')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported answer to Q1"))
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported answer\nto Q1"))
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
Multiple = mean(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt)
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported answer\nto Q1"))
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported\nanswer to Q1"))
test
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
Multiple = mean(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt) %>%
mutate(name = factor(name, c('One', 'Multiple'), c('One', 'Multiple')))
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported\nanswer to Q1"))
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
One.se = se.prop(One),
Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(Multiple)) %>%
pivot_longer(!best.model.oneatt) %>%
mutate(name = factor(name, c('One', 'Multiple'), c('One', 'Multiple')))
test
f.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
One.se = se.prop(One),
Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(Multiple))
df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
One.se = se.prop(One),
Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(Multiple))
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
One.se = se.prop(chosen.oneatt == 'One'),
Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt) %>%
mutate(name = factor(name, c('One', 'Multiple'), c('One', 'Multiple')))
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
One.se = se.prop(chosen.oneatt == 'One'),
Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(chosen.oneatt == 'Multiple'))
test
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
One.se = se.prop(chosen.oneatt == 'One'),
Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt) %>%
mutate(name = factor(name, c('One', 'Multiple'), c('One', 'Multiple')))
test
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported\nanswer to Q1")) +
theme(legend.position = 'bottom')
ggplot(test %>% filter(!is.na(name)), aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'dodge') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported\nanswer to Q1")) +
theme(legend.position = 'bottom')
test
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
One.se = se.prop(chosen.oneatt == 'One'),
Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(chosen.oneatt == 'Multiple'))
test
ggplot(test %>% filter(!is.na(name)), aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'stack') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported\nanswer to Q1")) +
theme(legend.position = 'bottom')
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
Multiple = mean(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt) %>%
mutate(name = factor(name, c('One', 'Multiple'), c('One', 'Multiple')))
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'stack') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported\nanswer to Q1")) +
theme(legend.position = 'bottom')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'stack') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported\nanswer to Q1")) +
theme(legend.position = 'bottom') +
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'stack') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported\nanswer to Q1")) +
theme(legend.position = 'bottom', legend.title = element_text(size = 18)) +
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed')
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'stack') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported answer to Q1")) +
theme(legend.position = 'bottom', legend.title = element_text(size = 18)) +
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed')
test
test$value.se = c(.0681, .0681, .0327, .0327)
test$value.se = c(.0681, .0681, .0327, .0327)
ggplot(test, aes(x = best.model.oneatt, y = value, group = name, fill = name)) +
geom_col(position = 'stack') +
geom_errorbar(aes(ymin = value - value.se, ymax = value + value.se)) +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants') +
guides(fill=guide_legend(title="Reported answer to Q1")) +
theme(legend.position = 'bottom', legend.title = element_text(size = 18)) +
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed')
test = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(One = mean(chosen.oneatt == 'One'),
Multiple = mean(chosen.oneatt == 'Multiple')) %>%
pivot_longer(!best.model.oneatt) %>%
mutate(name = factor(name, c('One', 'Multiple'), c('One', 'Multiple')))
test2 = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(chosen.oneatt == 'Multiple'))
test2
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_bar()
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col()
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col() +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2)
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col() +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black()
test2 = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(chosen.oneatt == 'Multiple'))
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col() +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black()
ggplot(test2, aes(x = best.model.oneatt, y = Multiple, color = 'white')) +
geom_col() +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black()
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black()
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants\nreporting "Multiple"') +
df.demo.filt %>% group_by(best.model.binwts) %>%
summarize(binwts.correct = mean(binwts.correct))
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting answer to Q1', y = '% of participants\nreporting "Multiple"')
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting answer\nto Q1', y = '% of participants\nreporting "Multiple"')
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q1', y = '% of participants\nreporting "Multiple"')
test2 = df.demo.filt %>% group_by(best.model.binwts) %>%
summarize(Multiple = mean(chosen.binwts == 'Graded'),
Multiple.se = se.prop(chosen.oneatt == 'Graded'))
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q2', y = '% of participants\nreporting "Graded"')
ggplot(test2, aes(x = best.model.binwts, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q2', y = '% of participants\nreporting "Graded"')
test2 = df.demo.filt %>% group_by(best.model.binwts) %>%
summarize(Multiple = mean(chosen.binwts == 'Graded'),
Multiple.se = se.prop(chosen.binwts == 'Graded'))
ggplot(test2, aes(x = best.model.binwts, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q2', y = '% of participants\nreporting "Graded"')
ggplot(test2 %>% filter(!is.na(best.model.binwts)), aes(x = best.model.binwts, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q2', y = '% of participants\nreporting "Graded"')
test3 = df.demo.filt %>% group_by(best.model.binatts) %>%
summarize(Multiple = mean(chosen.binatts == 'Graded'),
Multiple.se = se.prop(chosen.binatts == 'Graded'))
ggplot(test3 %>% filter(!is.na(best.model.binatts)), aes(x = best.model.binatts, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q3', y = '% of participants\nreporting "Graded"')
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q1', y = '% of participants\nreporting "Multiple"') +
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed')
test2 = df.demo.filt %>% group_by(best.model.oneatt) %>%
summarize(Multiple = mean(chosen.oneatt == 'Multiple'),
Multiple.se = se.prop(chosen.oneatt == 'Multiple'))
ggplot(test2, aes(x = best.model.oneatt, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q1', y = '% of participants\nreporting "Multiple"') +
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed')
test2 = df.demo.filt %>% group_by(best.model.binwts) %>%
summarize(Multiple = mean(chosen.binwts == 'Graded'),
Multiple.se = se.prop(chosen.binwts == 'Graded'))
ggplot(test2 %>% filter(!is.na(best.model.binwts)), aes(x = best.model.binwts, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q2', y = '% of participants\nreporting "Graded"') +
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed')
test3 = df.demo.filt %>% group_by(best.model.binatts) %>%
summarize(Multiple = mean(chosen.binatts == 'Graded'),
Multiple.se = se.prop(chosen.binatts == 'Graded'))
test3 = df.demo.filt %>% group_by(best.model.binatts) %>%
summarize(Multiple = mean(chosen.binatts == 'Graded'),
Multiple.se = se.prop(chosen.binatts == 'Graded'))
ggplot(test3 %>% filter(!is.na(best.model.binatts)), aes(x = best.model.binatts, y = Multiple)) +
geom_col(color = 'white') +
geom_errorbar(aes(ymin = Multiple - Multiple.se,
ymax = Multiple + Multiple.se),
width = .2, color = 'white') +
theme_black() +
labs(x = 'Best-fitting\nanswer to Q3', y = '% of participants\nreporting "Graded"')+
geom_hline(yintercept = .5, color = 'red', linetype = 'dashed')
summary(glm(chosen.oneatt ~ best.model.oneatt, df.demo.filt, family = 'binomial'))
summary(glm(lex_real ~ best.model.oneatt, df.demo.filt, family = 'binomial'))
summary(lm(lex_real ~ best.model.oneatt, df.demo.filt))
