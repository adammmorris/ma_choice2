}
if (df.demo$binwts_comp1_number[i] == 2) {
demo.colnames.temp1 = demo.colnames[grepl("binwts_comp1.*", demo.colnames)]
demo.colnames.temp2 = demo.colnames[grepl("binwts_comp2.*", demo.colnames)]
values.temp = df.demo[i,demo.colnames.temp1]
df.demo[i,demo.colnames.temp1] = df.demo[i,demo.colnames.temp2]
df.demo[i,demo.colnames.temp2] = values.temp
}
if (df.demo$binatts_comp1_number[i] == 2) {
demo.colnames.temp1 = demo.colnames[grepl("binatts_comp1.*", demo.colnames)]
demo.colnames.temp2 = demo.colnames[grepl("binatts_comp2.*", demo.colnames)]
values.temp = df.demo[i,demo.colnames.temp1]
df.demo[i,demo.colnames.temp1] = df.demo[i,demo.colnames.temp2]
df.demo[i,demo.colnames.temp2] = values.temp
}
}
colnames.temp = c('lex_comp1', 'lex_comp2', 'binwts_comp1', 'binwts_comp2', 'binatts_comp1', 'binatts_comp2')
df.cc = df.demo %>% select(subject, strat_q_order, colnames.temp) %>% pivot_longer(colnames.temp)
df.cc = df.cc %>% mutate(answer = ifelse(grepl(".*1.*", name), 0, 100),
correct = (answer == 0 & value < 50) | (answer == 100 & value > 50))
ggplot(df.cc, aes(x = value)) +
geom_histogram() +
geom_vline(aes(xintercept = answer), color = 'red', linetype = 'dashed') +
geom_vline(aes(xintercept = 50), color = 'black', linetype = 'dashed') +
facet_wrap(~name)
df.cc.question = df.cc %>% group_by(name) %>%
summarize(correct = mean(correct), correct.se = se.prop(correct))
df.cc.question
df.cc.order = df.cc %>% group_by(strat_q_order, name) %>%
summarize(correct = mean(correct), correct.se = se.prop(correct))
df.cc.order %>% filter(name == 'binwts_comp1')
df.cc.subj = df.cc %>% group_by(subject) %>%
summarize(correct.total = sum(correct),
correct.without.binatts1 = sum(ifelse(name == 'binatts_comp1', 0, correct)),
correct.lex = sum(ifelse(grepl('lex_comp.*', name), correct, 0)),
correct.binwts = sum(ifelse(grepl('binwts_comp.*', name), correct, 0)),
correct.binatts = sum(ifelse(grepl('binatts_comp.*', name), correct, 0)))
for (i in 1:nrow(df.demo)) {
cc.row = df.cc.subj$subject == df.demo$subject[i]
df.demo$cc.correct.total[i] = df.cc.subj$correct.total[cc.row]
df.demo$cc.correct.lex[i] = df.cc.subj$correct.lex[cc.row]
df.demo$cc.correct.binwts[i] = df.cc.subj$correct.binwts[cc.row]
df.demo$cc.correct.binatts[i] = df.cc.subj$correct.binatts[cc.row]
}
demo.colnames = colnames(df.demo)
require(ggplot2)
require(lme4)
require(lmerTest)
require(combinat)
require(effectsize)
require(RColorBrewer)
require(dplyr)
require(tidyr)
require(forcats)
theme_update(strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
axis.text=element_text(size=30, colour = "black"),
axis.title=element_text(size=18, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1),
panel.margin = unit(1.0, "lines"),
plot.margin = unit(c(0.5,  0.5, 0.5, 0.5), "lines"),
axis.line = element_line(colour = "black", size = 2),
axis.ticks = element_line(color = 'black', size = 3),
axis.ticks.length = unit(.25, 'cm')
)
theme_black = function(base_size = 12, base_family = "") {
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
axis.text.x = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "white", lineheight = 0.9),
axis.ticks = element_line(color = "white", size  =  0.2),
axis.title.x = element_text(size = base_size, color = "white", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = base_size, color = "white", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "black"),
legend.key = element_rect(color = "white",  fill = "black"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "white"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "white"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(fill = NA, color = "white"),
# Specify facetting options
strip.background = element_rect(fill = "grey30", color = "grey10"),
strip.text.x = element_text(size = base_size*0.8, color = "white"),
strip.text.y = element_text(size = base_size*0.8, color = "white",angle = -90),
# Specify plot options
plot.background = element_rect(color = "black", fill = "black"),
plot.title = element_text(size = base_size*1.2, color = "white"),
plot.margin = unit(rep(1, 4), "lines")
)
}
se = function(x) {return(sd(x, na.rm = T) / sqrt(sum(!is.na(x))))}
se.prop = function(x) {return(sqrt(mean(x, na.rm = T) * (1-mean(x, na.rm = T)) / sum(!is.na(x))))}
get.ci = function(x) {return(c(mean(x,na.rm = T) - 1.96*se(x), mean(x, na.rm = T), mean(x, na.rm = T) + 1.96*se(x)))}
as.string.vector = function(x) {
return(strsplit(x,',')[[1]])
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(gsub('\\[|\\]','',x),',')[[1]]))
}
as.string = function(x) {
return(paste(x, collapse = ','))
}
dodge <- position_dodge(width=0.9)
# Only works in RStudio -- otherwise you have to set the path manually
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
one.att.levels =c('One', 'Multiple')
bin.wts.levels =c('Binary', 'Graded')
bin.atts.levels =c('Binary', 'Graded')
df.demo = read.csv('demo.csv', stringsAsFactors = F) %>% arrange(subject) %>%
rowwise() %>%
mutate(total_time_real = total_time / 60000,
instructions_times_list = list(as.numeric.vector(instructions_times) / 1000)) %>%
ungroup() %>%
mutate(chosen.oneatt = factor(lex_real > 50, c(F,T), one.att.levels),
chosen.binwts = factor(binwts_real > 50, c(F,T), bin.wts.levels),
chosen.binatts = factor(binatts_real > 50, c(F,T), bin.atts.levels),
subject = factor(subject), subject.num = as.numeric(subject))
for (i in 1:nrow(df.demo)) {
df.demo$instruction_times_median[i] = median(df.demo$instructions_times_list[i][[1]])
df.demo$instruction_times_sd[i] = sd(df.demo$instructions_times_list[i][[1]])
}
df.demo.followup = read.csv('demo_followup.csv', stringsAsFactors = F) %>% arrange(subject) %>%
rowwise() %>%
mutate(total_time_real = total_time / 60000,
instructions_times_list = list(as.numeric.vector(instructions_times) / 1000))
for (i in 1:nrow(df.demo.followup)) {
demo.row = df.demo$subject == df.demo.followup$subject[i];
df.demo$instruction_times_followup_median[demo.row] = median(df.demo.followup$instructions_times_list[i][[1]])
df.demo$instruction_times_followup_sd[demo.row] = sd(df.demo.followup$instructions_times_list[i][[1]])
}
# filter out anyone who didn't finish
subjlist = unique(df.demo$subject)
df.s1 = read.csv('s1.csv', stringsAsFactors = F) %>% filter(subject %in% subjlist, practice == 0) %>%
arrange(subject) %>% mutate(subject = factor(subject), subject.num = as.numeric(subject))
df.s2 = read.csv('s2.csv', stringsAsFactors = F) %>% filter(subject %in% subjlist) %>%
arrange(subject) %>%
mutate(subject = factor(subject), subject.num = as.numeric(subject),
least_preferred_temp = least_preferred, least_preferred = most_preferred,
most_preferred = least_preferred_temp) %>% # temporary shit I gotta do because I reversed the columns.. lol
dplyr::select(-least_preferred_temp)
df.attributes = read.csv('attributes.csv', stringsAsFactors = F) %>% filter(subject %in% subjlist) %>%
arrange(subject) %>% mutate(subject = factor(subject), subject.num = as.numeric(subject))
demo.colnames = colnames(df.demo)
for (i in 1:nrow(df.demo)) {
# b/c of bug in pilot2.. can be removed for later
#df.demo$binatts_comp1_number[i] = ifelse(grepl(".*Xavier.*", df.demo$binatts_comp1_description[i]),
#1, 2)
#df.demo$binatts_comp2_number[i] = ifelse(grepl(".*Xavier.*", df.demo$binatts_comp2_description[i]),
#1, 2)
if (df.demo$lex_comp1_number[i] == 2) {
demo.colnames.temp1 = demo.colnames[grepl("lex_comp1.*", demo.colnames)]
demo.colnames.temp2 = demo.colnames[grepl("lex_comp2.*", demo.colnames)]
values.temp = df.demo[i,demo.colnames.temp1]
df.demo[i,demo.colnames.temp1] = df.demo[i,demo.colnames.temp2]
df.demo[i,demo.colnames.temp2] = values.temp
}
if (df.demo$binwts_comp1_number[i] == 2) {
demo.colnames.temp1 = demo.colnames[grepl("binwts_comp1.*", demo.colnames)]
demo.colnames.temp2 = demo.colnames[grepl("binwts_comp2.*", demo.colnames)]
values.temp = df.demo[i,demo.colnames.temp1]
df.demo[i,demo.colnames.temp1] = df.demo[i,demo.colnames.temp2]
df.demo[i,demo.colnames.temp2] = values.temp
}
if (df.demo$binatts_comp1_number[i] == 2) {
demo.colnames.temp1 = demo.colnames[grepl("binatts_comp1.*", demo.colnames)]
demo.colnames.temp2 = demo.colnames[grepl("binatts_comp2.*", demo.colnames)]
values.temp = df.demo[i,demo.colnames.temp1]
df.demo[i,demo.colnames.temp1] = df.demo[i,demo.colnames.temp2]
df.demo[i,demo.colnames.temp2] = values.temp
}
}
colnames.temp = c('lex_comp1', 'lex_comp2', 'binwts_comp1', 'binwts_comp2', 'binatts_comp1', 'binatts_comp2')
df.cc = df.demo %>% select(subject, strat_q_order, colnames.temp) %>% pivot_longer(colnames.temp)
df.cc = df.cc %>% mutate(answer = ifelse(grepl(".*1.*", name), 0, 100),
correct = (answer == 0 & value < 50) | (answer == 100 & value > 50))
ggplot(df.cc, aes(x = value)) +
geom_histogram() +
geom_vline(aes(xintercept = answer), color = 'red', linetype = 'dashed') +
geom_vline(aes(xintercept = 50), color = 'black', linetype = 'dashed') +
facet_wrap(~name)
df.cc.question = df.cc %>% group_by(name) %>%
summarize(correct = mean(correct), correct.se = se.prop(correct))
df.cc.question
df.cc.order = df.cc %>% group_by(strat_q_order, name) %>%
summarize(correct = mean(correct), correct.se = se.prop(correct))
df.cc.order %>% filter(name == 'binwts_comp1')
df.cc.subj = df.cc %>% group_by(subject) %>%
summarize(correct.total = sum(correct),
correct.without.binatts1 = sum(ifelse(name == 'binatts_comp1', 0, correct)),
correct.lex = sum(ifelse(grepl('lex_comp.*', name), correct, 0)),
correct.binwts = sum(ifelse(grepl('binwts_comp.*', name), correct, 0)),
correct.binatts = sum(ifelse(grepl('binatts_comp.*', name), correct, 0)))
for (i in 1:nrow(df.demo)) {
cc.row = df.cc.subj$subject == df.demo$subject[i]
df.demo$cc.correct.total[i] = df.cc.subj$correct.total[cc.row]
df.demo$cc.correct.lex[i] = df.cc.subj$correct.lex[cc.row]
df.demo$cc.correct.binwts[i] = df.cc.subj$correct.binwts[cc.row]
df.demo$cc.correct.binatts[i] = df.cc.subj$correct.binatts[cc.row]
}
## Stage 1 choices
# make wide df, put each attribute in its own column
atts = unique(df.attributes$attribute)
att.nums = 1:length(atts)
att.nums.str = as.character(att.nums)
atts.opt1 = paste0(atts,'.opt1')
atts.opt2 = paste0(atts,'.opt2')
atts.opt1.enclosed = paste0('`',atts.opt1,'`')
atts.opt2.enclosed = paste0('`',atts.opt2,'`')
atts.opt.diff = paste0(atts,'.diff')
atts.opt.diff.enclosed = paste0('`',atts.opt.diff,'`')
df.s1[,atts.opt1] = NA
df.s1[,atts.opt2] = NA
df.avail.atts = data.frame(matrix(0,nrow = nrow(df.s1), ncol = length(atts)+1))
colnames(df.avail.atts) = c('subject.num', atts.opt1)
df.avail.atts$subject.num = df.s1$subject.num
for (i in 1:nrow(df.s1)) {
cur.atts = as.string.vector(df.s1$attributes[i])
cur.opt1.vals = as.string.vector(df.s1$opt1_values[i])
cur.opt2.vals = as.string.vector(df.s1$opt2_values[i])
cur.att.nums = numeric(length(cur.atts))
cur.atts.order = numeric(length(cur.atts))
for (j in 1:length(cur.atts)) {
#att.row = df.attributes$subject == df.s1$subject[i] & df.attributes$attribute == cur.atts[j]
cur.att.nums[j] = which(cur.atts[j] == atts)
df.s1[i,atts.opt1[cur.att.nums[j]]] = cur.opt1.vals[j]
df.s1[i,atts.opt2[cur.att.nums[j]]] = cur.opt2.vals[j]
df.avail.atts[i,atts.opt1[cur.att.nums[j]]] = 1
cur.atts.order[j] = which(atts[j] == cur.atts)
}
df.s1$atts.order[i] = as.string(cur.atts.order)
df.s1$att.nums[i] = as.string(cur.att.nums)
}
# convert attribute values to numerics
for (i in 1:length(atts)) {
cur.att.opt1 = atts.opt1[i]
cur.att.opt2 = atts.opt2[i]
cur.scale = unique(df.attributes$scale[df.attributes$attribute == atts[i]])
if (cur.scale == "") {
df.s1[,cur.att.opt1] = as.numeric(sub('\\ .*', '', df.s1[,cur.att.opt1]))
df.s1[,cur.att.opt2] = as.numeric(sub('\\ .*', '', df.s1[,cur.att.opt2]))
} else {
cur.scale = unlist(strsplit(cur.scale, split = ","))
df.s1[,cur.att.opt1] = as.numeric(factor(df.s1[,cur.att.opt1], cur.scale))
df.s1[,cur.att.opt2] = as.numeric(factor(df.s1[,cur.att.opt2], cur.scale))
}
}
# compute diffs
for (i in 1:length(atts)) {
df.s1[,paste0(atts[i], '.diff')] = df.s1[,atts.opt2[i]] - df.s1[,atts.opt1[i]]
}
# create scaled df.s1 with normalized attribute values (per subject)
df.s1.scaled = df.s1
for (i in df.s1$subject.num) {
subj.rows = df.s1$subject.num == i
df.s1.scaled[subj.rows, c(atts.opt1, atts.opt2, atts.opt.diff)] = scale(df.s1[subj.rows, c(atts.opt1, atts.opt2, atts.opt.diff)])
}
# same thing, except get rid of nan's
df.s1.scaled.nonan = df.s1.scaled
for (i in 1:ncol(df.s1.scaled)) {
df.s1.scaled.nonan[is.na(df.s1.scaled.nonan[,i]),i] = 0
}
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(total.time = sum(rt) / 60000,
pct_left = mean(choice == 0),
median_rt = median(rt),
sd_rt = sd(rt),
num_trials = n())
for (i in 1:nrow(df.attributes)) {
cur.att = df.attributes$attribute[i]
subj = df.attributes$subject[i]
cur.scale = df.attributes$scale[i]
rows.demo = df.demo$subject == subj
rows.s2.wad = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'wad_att_rating'
rows.s2.ew = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'ew_att_rating'
rows.s2.lex = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'lex_att_rating'
rows.s2.direction = df.s2$subject == subj & df.s2$attribute == cur.att & df.s2$type == 'direction'
# if this is the one...
if (any(rows.s2.lex)) {
df.attributes$rating.lex[i] = 1 # should be 1
} else {
df.attributes$rating.lex[i] = 0
}
if (any(rows.s2.ew)) {
df.attributes$rating.ew[i] = 1 # should be 1
} else {
df.attributes$rating.ew[i] = 0
}
df.attributes$rating.wad[i] = df.s2$rating[rows.s2.wad] / 100
if (cur.scale == "") {
least = as.numeric(sub('\\ .*', '', df.s2$least_preferred[rows.s2.direction]))
most = as.numeric(sub('\\ .*', '', df.s2$most_preferred[rows.s2.direction]))
bounds = c(df.attributes$lb[i], df.attributes$ub[i])
} else {
cur.scale = unlist(strsplit(cur.scale, ","))
least = which(df.s2$least_preferred[rows.s2.direction] == cur.scale)
most = which(df.s2$most_preferred[rows.s2.direction] == cur.scale)
bounds = c(1, length(cur.scale))
}
df.attributes$most[i] = most
df.attributes$least[i] = least
df.attributes$direction[i] = sign(most - least)
df.attributes$same[i] = most == least
df.attributes$linear[i] = least %in% bounds & most %in% bounds
df.attributes$almost.linear[i] =
(least %in% bounds | (least+1) %in% bounds | (least-1) %in% bounds) &
(most %in% bounds | (most+1) %in% bounds | (most-1) %in% bounds)
df.attributes$lex_real[i] = df.demo$lex_real[rows.demo]
df.attributes$binwts_real[i] = df.demo$binwts_real[rows.demo]
df.attributes$binatts_real[i] = df.demo$binatts_real[rows.demo]
df.attributes$chosen.oneatt[i] = df.demo$chosen.oneatt[rows.demo]
df.attributes$chosen.binwts[i] = df.demo$chosen.binwts[rows.demo]
df.attributes$chosen.binatts[i] = df.demo$chosen.binatts[rows.demo]
df.attributes$chosen.model[i] = df.demo$chosen.model[rows.demo]
df.attributes$chosen.model.num[i] = df.demo$chosen.model.num[rows.demo]
df.attributes$chosen.model.fac[i] = df.demo$chosen.model.fac[rows.demo]
df.attributes$rating.chosen[i] = ifelse(df.demo$chosen.oneatt[rows.demo] == 'One',
df.attributes$rating.lex[i],
ifelse(df.demo$chosen.binwts[rows.demo] == 'Binary',
df.attributes$rating.ew[i],
df.attributes$rating.wad[i]))
df.attributes$rating.best[i] = ifelse(df.demo$best.model.oneatt[rows.demo] == 'One',
df.attributes$rating.lex[i],
ifelse(df.demo$best.model.binwts[rows.demo] == 'Binary',
df.attributes$rating.ew[i],
df.attributes$rating.wad[i]))
}
df.attributes = df.attributes %>%
mutate(rating.wad.signed = rating.wad * direction,
rating.ew.signed = rating.ew * direction,
rating.lex.signed = rating.lex * direction,
rating.chosen.signed = rating.chosen * direction,
rating.best.signed = rating.best * direction)
df.browser = read.csv('browser_events.csv', stringsAsFactors = F)
df.browser.subj = df.browser %>%
filter(browser_event == 'blur') %>%
group_by(subject) %>%
summarize(num.blur = n())
exclude.subj = c()
for (subj in subjlist) {
demo.row = df.demo$subject == subj
s1.subj = df.s1.subj$subject == subj
browser.row = df.browser.subj$subject == subj
if (subj %in% exclude.subj.ant |
df.demo$instruction_times_median[demo.row] < 2 |
(!is.na(df.demo$instruction_times_followup_median[demo.row]) && df.demo$instruction_times_followup_median[demo.row] < 2) |
df.s1.subj$pct_left[s1.subj] > .8 |
df.s1.subj$pct_left[s1.subj] < .2 |
df.s1.subj$num_trials != 100 |
df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0 |
df.demo$attention[demo.row] < .5 |
#df.demo$below.chance[demo.row] |
(any(browser.row) && df.browser.subj$num.blur[df.browser.subj$subject == subj] > 20)) {
exclude.subj = c(exclude.subj, subj)
}
}
exclude.subj = c()
for (subj in subjlist) {
demo.row = df.demo$subject == subj
s1.subj = df.s1.subj$subject == subj
browser.row = df.browser.subj$subject == subj
if (#subj %in% exclude.subj.ant |
df.demo$instruction_times_median[demo.row] < 2 |
(!is.na(df.demo$instruction_times_followup_median[demo.row]) && df.demo$instruction_times_followup_median[demo.row] < 2) |
df.s1.subj$pct_left[s1.subj] > .8 |
df.s1.subj$pct_left[s1.subj] < .2 |
df.s1.subj$num_trials != 100 |
df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0 |
df.demo$attention[demo.row] < .5 |
#df.demo$below.chance[demo.row] |
(any(browser.row) && df.browser.subj$num.blur[df.browser.subj$subject == subj] > 20)) {
exclude.subj = c(exclude.subj, subj)
}
}
exclude.subj = c()
for (subj in subjlist) {
demo.row = df.demo$subject == subj
s1.subj = df.s1.subj$subject == subj
browser.row = df.browser.subj$subject == subj
if (#subj %in% exclude.subj.ant |
df.demo$instruction_times_median[demo.row] < 2 |
(!is.na(df.demo$instruction_times_followup_median[demo.row]) && df.demo$instruction_times_followup_median[demo.row] < 2) |
df.s1.subj$pct_left[s1.subj] > .8 |
df.s1.subj$pct_left[s1.subj] < .2 |
df.s1.subj$num_trials != 100 |
df.demo$attention[demo.row] < .5 |
#df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0 |
#df.demo$below.chance[demo.row] |
(any(browser.row) && df.browser.subj$num.blur[df.browser.subj$subject == subj] > 20)) {
exclude.subj = c(exclude.subj, subj)
}
}
is.na(df.demo$instruction_times_followup_median[demo.row])
exclude.subj = c()
for (subj in subjlist) {
demo.row = df.demo$subject == subj
s1.subj = df.s1.subj$subject == subj
browser.row = df.browser.subj$subject == subj
if (df.demo$instruction_times_median[demo.row] < 2 |
df.s1.subj$pct_left[s1.subj] > .8 |
df.s1.subj$pct_left[s1.subj] < .2 |
df.s1.subj$num_trials != 100 |
df.demo$attention[demo.row] < .5 |
#df.attributes.subj$num_same[df.attributes.subj$subject == subj] > 0 |
#df.demo$below.chance[demo.row] |
#subj %in% exclude.subj.ant |
#(!is.na(df.demo$instruction_times_followup_median[demo.row]) && df.demo$instruction_times_followup_median[demo.row] < 2) |
(any(browser.row) && df.browser.subj$num.blur[df.browser.subj$subject == subj] > 20)) {
exclude.subj = c(exclude.subj, subj)
}
}
df.demo.filt = df.demo %>% filter(!(subject %in% exclude.subj))
df.s1.filt = df.s1 %>% filter(!(subject %in% exclude.subj))
df.s2.filt = df.s2 %>% filter(!(subject %in% exclude.subj))
df.attributes.filt = df.attributes %>% filter(!(subject %in% exclude.subj))
df.attributes.subj.filt = df.attributes.subj %>% filter(!(subject %in% exclude.subj))
df.cv.filt = df.cv %>% filter(!(subject %in% exclude.subj))
df.cv.norm.filt = df.cv.norm %>% filter(!(subject %in% exclude.subj))
df.cv.best.filt = df.cv.best %>% filter(!(subject %in% exclude.subj))
## comprehension checks
ggplot(df.cc.filt, aes(x = value)) +
geom_histogram() +
geom_vline(aes(xintercept = answer), color = 'red', linetype = 'dashed') +
geom_vline(aes(xintercept = 50), color = 'black', linetype = 'dashed') +
facet_wrap(~name) +
xlab('Response (0-100)') + ylab('# of Subjects') +
scale_x_continuous(limits = c(-10,110), breaks = c(0,50,100)) +
scale_y_continuous()
df.cc.filt = df.cc %>% filter(!(subject %in% exclude.subj))
df.cc.subj.filt = df.cc.subj %>% filter(!(subject %in% exclude.subj))
## comprehension checks
ggplot(df.cc.filt, aes(x = value)) +
geom_histogram() +
geom_vline(aes(xintercept = answer), color = 'red', linetype = 'dashed') +
geom_vline(aes(xintercept = 50), color = 'black', linetype = 'dashed') +
facet_wrap(~name) +
xlab('Response (0-100)') + ylab('# of Subjects') +
scale_x_continuous(limits = c(-10,110), breaks = c(0,50,100)) +
scale_y_continuous()
hist(df.cc.subj.filt$correct.total)
hist(df.cc.subj.filt$correct.total)
## comprehension checks
ggplot(df.cc.filt, aes(x = value)) +
geom_histogram() +
geom_vline(aes(xintercept = answer), color = 'red', linetype = 'dashed') +
geom_vline(aes(xintercept = 50), color = 'black', linetype = 'dashed') +
facet_wrap(~name) +
xlab('Response (0-100)') + ylab('# of Subjects') +
scale_x_continuous(limits = c(-10,110), breaks = c(0,50,100)) +
scale_y_continuous()
hist(df.cc.subj.filt$correct.total)
hist(df.cc.subj.filt$correct.without.binatts1)
hist(df.cc.subj.filt$correct.total)
## comprehension checks
ggplot(df.cc.filt, aes(x = value)) +
geom_histogram() +
geom_vline(aes(xintercept = answer), color = 'red', linetype = 'dashed') +
geom_vline(aes(xintercept = 50), color = 'black', linetype = 'dashed') +
facet_wrap(~name) +
xlab('Response (0-100)') + ylab('# of Subjects') +
scale_x_continuous(limits = c(-10,110), breaks = c(0,50,100)) +
scale_y_continuous()
df.cc.question.filt = df.cc.filt %>% group_by(name) %>%
summarize(correct = mean(correct), correct.se = se.prop(correct))
df.cc.question.filt
hist(df.cc.subj.filt$correct.total)
save.image('analysis.rdata')
write.table(df.s1 %>% dplyr::select(subject.num, all_of(atts.opt1)), 'modeling_opts1.csv', row.names = F, col.names = F, sep = ",")
write.table(df.s1 %>% dplyr::select(subject.num, all_of(atts.opt2)), 'modeling_opts2.csv', row.names = F, col.names = F, sep = ",")
write.table(df.s1 %>% dplyr::select(subject.num, choice) %>% mutate(choice = choice + 1), 'modeling_choice.csv', row.names = F, col.names = F, sep = ",")
write.table(df.avail.atts, 'modeling_avail_atts.csv', row.names = F, col.names = F, sep = ",")
df.s1$first.att = NULL
df.s1$first.maxdiff.att = NULL
for (i in 1:nrow(df.s1)) {
cur.order = as.numeric.vector(df.s1$atts.order[i])
df.s1$first.att[i] = which(cur.order == 1)
for (j in 1:length(cur.order)) {
cur.att = which(cur.order == j)
cur.att.name = atts.opt.diff[cur.att]
if (abs(df.s1[i,cur.att.name]) == max(abs(df.s1[,cur.att.name]))) {
df.s1$first.maxdiff.att[i] = cur.att
break
}
}
}
write.table(df.s1 %>% dplyr::select(subject.num, first.att), 'first_atts.csv', row.names = F, col.names = F, sep = ",")
write.table(df.s1 %>% dplyr::select(subject.num, first.maxdiff.att), 'first_maxdiff_atts.csv', row.names = F, col.names = F, sep = ",")
hist(df.demo$total_time_real)
median(df.demo$total_time_real)
rm(list=ls())
load("/Users/adam/Me/Psychology/Projects/ma_choice/git/data/v4/pilot2/analysis.rdata")
median(df.demo.followup$total_time_real)
mean(df.demo.followup$total_time_real)
